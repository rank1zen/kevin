package frontend

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal"
	"github.com/rank1zen/kevin/internal/ddragon"
	"io"
	"path"
	"github.com/rank1zen/kevin/internal/riot"
)

// ChampionWidget displays a champion icon and summoner spells.
type ChampionWidget struct {
	ChampionSprite ChampionSprite

	// ChampionLevel is the level of the champion at the end of a match.
	// A zero value indicates to not show champion level.
	ChampionLevel int

	// TODO: SummonerD and SummonerF are ... Values of nil indicates
	// summoner spells are not shown
	SummonerD, SummonerF *SummonerSprite
}

templ (m ChampionWidget) build() {
	if m.SummonerD != nil && m.SummonerF != nil {
		<div class="flex flex-none items-start gap-0.5">
			@m.ChampionSprite
			<div>
				@m.SummonerD
				@m.SummonerF
			</div>
		</div>
	} else {
		@m.ChampionSprite
	}
}

func (m ChampionWidget) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// RuneWidget displays match runes.
type RuneWidget struct {
	RunePage internal.RunePage
}

templ (m RuneWidget) buildFullRunPageView() {
	// TODO
}

templ (m RuneWidget) buildKeystone() {
	<div class="size-9">
		<img
			src={ path.Join("/static/", ddragon.RuneMap[m.RunePage.PrimaryKeystone].IconPath) }
			class="size-9"
		/>
	</div>
}

templ (m RuneWidget) buildSecondary() {
	<div class="h-9 w-6 flex items-center justify-center">
		<img
			src={ path.Join("/static/", ddragon.RuneMap[m.RunePage.SecondaryTree].IconPath) }
			class="size-4"
		/>
	</div>
}

templ (m RuneWidget) build() {
	{{
		keystone := ddragon.RuneMap[m.RunePage.PrimaryKeystone]
		secondaryTree := ddragon.RuneMap[m.RunePage.SecondaryTree]
	}}
	<div class="flex flex-none items-center h-9 bg-gray-900/5 dark:bg-gray-100/5 rounded-lg">
		@Tooltip{Tip: keystone.Name, ButtonChildren: m.buildKeystone(), ButtonStyle: 1}
		@Tooltip{Tip: secondaryTree.Name, ButtonChildren: m.buildSecondary(), ButtonStyle: 1}
		@Popover{ButtonChildren: ThinButton{IconPath: "down-small-symbolic.svg"}}
	</div>
}

func (m RuneWidget) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// ItemWidget displays an inventory of items.
type ItemWidget struct {
	Items [7]int
}

templ (m ItemWidget) makeItemAtIndex(i int) {
	{{ id := m.Items[i] }}
	if id == 0 {
		<div class="size-7 rounded bg-gray-900/5 dark:bg-gray-100/5"></div>
	} else {
		<button
			title={ ddragon.ItemsMap[id].Name }
			type="button"
			if i == 6 {
				class="size-7 shadow-xs shadow-gray-900/50 dark:shadow-gray-100/50 overflow-hidden cursor-pointer rounded-full"
			} else {
				class="size-7 shadow-xs shadow-gray-900/50 dark:shadow-gray-100/50 overflow-hidden cursor-pointer rounded"
			}
		>
			@ItemSprite{ItemID: m.Items[i]}
		</button>
	}
}

templ (m ItemWidget) build() {
	<div class="flex flex-none bg-gray-900/5 dark:bg-gray-100/5 rounded-lg">
		<div class="flex gap-1 p-1">
			for i := range 7 {
				@m.makeItemAtIndex(i)
			}
		</div>
		@Popover{ButtonChildren: ThinButton{IconPath: "down-small-symbolic.svg"}}
	</div>
}

func (m ItemWidget) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type KDAWidget struct {
	Kills, Deaths, Assists int

	KillParticipation float32
}

func (m KDAWidget) generateKillTextColor() string {
	if m.Kills < 3 {
		return "text-gray-900/90"
	} else if m.Kills < 6 {
		return "text-yelow-900/90"
	} else if m.Kills < 9 {
		return "text-yellow-800/90"
	} else {
		return "text-yellow-500/90"
	}
}

func (m KDAWidget) generateDeathTextColor() string {
	if m.Deaths < 3 {
		return "text-gray-400"
	} else if m.Deaths < 6 {
		return "text-red-200"
	} else if m.Deaths < 9 {
		return "text-red-300"
	} else {
		return "text-red-400"
	}
}

func (m KDAWidget) generateAssistTextColor() string {
	if m.Assists < 3 {
		return "text-gray-400"
	} else if m.Assists < 6 {
		return "text-cyan-200"
	} else if m.Assists < 9 {
		return "text-cyan-300"
	} else {
		return "text-cyan-400"
	}
}

templ (m KDAWidget) build() {
	<div class="h-9">
		<div class="flex flex-none items-center font-semibold text-sm">
			<div class="w-5 text-gray-900/90 dark:text-gray-100/90">
				{ fmt.Sprintf("%d", m.Kills) }
			</div>
			<div class="text-gray-900/5 dark:text-gray-100/5">
				/
			</div>
			<div class="w-5 text-red-500/90 ml-1">
				{ fmt.Sprintf("%d", m.Deaths) }
			</div>
			<div class="text-gray-900/5 dark:text-gray-100/5">
				/
			</div>
			<div class="w-5 text-gray-900/90 dark:text-gray-100/90 ml-1">
				{ fmt.Sprintf("%d", m.Assists) }
			</div>
		</div>
		<div class="text-xs text-gray-900/90 dark:text-gray-100/90">
			{ fmt.Sprintf("%.1f", m.KillParticipation) }
		</div>
	</div>
}

func (m KDAWidget) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type CSWidget struct {
	CS int

	CSPerMinute float32
}

templ (m CSWidget) build() {
	<div class="size-9">
		<div class="font-semibold text-sm text-gray-900/90 dark:text-gray-100/90">
			{ fmt.Sprintf("%d", m.CS) }
		</div>
		<div class="text-xs text-gray-900/90 dark:text-gray-100/90">
			{ fmt.Sprintf("%.1f", m.CSPerMinute) }
		</div>
	</div>
}

func (m CSWidget) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// RankWidget displays summoner rank.
type RankWidget struct {
	// Rank is the summoner's rank at an instance. A nil value indicates
	// summoner is unranked.
	Rank *internal.RankDetail

	ShowTierName bool

	// Size is the height of the widget, following [TextSize]. [TextSizeXS]
	// and [TextSizeSM] are supported.
	Size TextSize

	// currently not used.
	UsePill bool
}

// generateLabel generates "Gold IV 71 LP" if ShowTierName is true, else
// "71 LP".
func (m RankWidget) generateLabel() string {
	if !m.ShowTierName {
		if m.Rank == nil {
			return ""
		}

		return fmt.Sprintf("%d LP", m.Rank.LP)
	}

	if m.Rank == nil {
		return "Unranked"
	}

	label := fmt.Sprintf("%s %s %d LP", m.Rank.Tier.String(), m.Rank.Division.String(), m.Rank.LP)
	if m.Rank.Tier == riot.TierChallenger || m.Rank.Tier == riot.TierGrandmaster || m.Rank.Tier == riot.TierMaster {
		label = fmt.Sprintf("%s %d LP", m.Rank.Tier.String(), m.Rank.LP)
	}

	return label
}

func (m RankWidget) generateIcon() templ.Component {
	if m.Rank == nil {
		return TierUnrankedIcon
	}

	c, ok := tierSymbol[m.Rank.Tier]
	if !ok {
		panic("rank widget symbol is not valid")
	}

	return c
}

templ (m RankWidget) build() {
	if m.Size == TextSizeXS {
		<div class="flex flex-none h-4 items-center gap-x-1 cursor-default">
			@m.generateIcon()
			<span class="text-xs">
				{ m .generateLabel() }
			</span>
		</div>
	} else {
		<div class="flex flex-none h-5 items-center gap-x-1 cursor-default">
			@m.generateIcon()
			<span class="text-sm">
				{ m .generateLabel() }
			</span>
		</div>
	}
}

// generateTierTextColorClass generates a TW text color class.
func (m RankWidget) generateTierTextColorClass() string {
	if m.Rank == nil {
		return "text-gray-600/90"
	}

	return tierTextColor[m.Rank.Tier]
}

// generateTierTextColorClass generates a TW bg color class.
func (m RankWidget) generateTierBGColorClass() string {
	if m.Rank == nil {
		return "text-gray-600/50"
	}

	return tierBGColor[m.Rank.Tier]
}

func (m RankWidget) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

var tierTextColor = map[riot.Tier]string{
	riot.TierIron:        "text-stone-500",
	riot.TierBronze:      "text-yellow-700",
	riot.TierSilver:      "text-slate-400",
	riot.TierGold:        "text-yellow-500",
	riot.TierPlatinum:    "text-cyan-400",
	riot.TierEmerald:     "text-green-600",
	riot.TierDiamond:     "text-violet-500",
	riot.TierMaster:      "text-violet-500",
	riot.TierGrandmaster: "text-red-600",
	riot.TierChallenger:  "text-amber-200",
}

var tierBGColor = map[riot.Tier]string{
	riot.TierIron:        "bg-stone-500/25",
	riot.TierBronze:      "bg-yellow-700/25",
	riot.TierSilver:      "bg-slate-400/25",
	riot.TierGold:        "bg-yellow-500/25",
	riot.TierPlatinum:    "bg-cyan-400/25",
	riot.TierEmerald:     "bg-green-600/25",
	riot.TierDiamond:     "bg-violet-500/25",
	riot.TierMaster:      "bg-violet-500/25",
	riot.TierGrandmaster: "bg-red-600/25",
	riot.TierChallenger:  "bg-amber-200/25",
}

var tierSymbol = map[riot.Tier]templ.Component{
	riot.TierIron:        TierIronIcon,
	riot.TierBronze:      TierBronzeIcon,
	riot.TierSilver:      TierSilverIcon,
	riot.TierGold:        TierGoldIcon,
	riot.TierPlatinum:    TierPlatinumIcon,
	riot.TierEmerald:     TierEmeraldIcon,
	riot.TierDiamond:     TierDiamondIcon,
	riot.TierMaster:      TierMasterIcon,
	riot.TierGrandmaster: TierGrandmasterIcon,
	riot.TierChallenger:  TierChallengerIcon,
}

var tierSize = map[riot.Tier]string{
	riot.TierIron:        "size-4",
	riot.TierBronze:      "size-4",
	riot.TierSilver:      "size-4",
	riot.TierGold:        "size-4",
	riot.TierPlatinum:    "size-5",
	riot.TierEmerald:     "size-5",
	riot.TierDiamond:     "size-5",
	riot.TierMaster:      "size-4",
	riot.TierGrandmaster: "size-4",
	riot.TierChallenger:  "size-4",
}
