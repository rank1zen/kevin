package frontend

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal/riot"
	"io"
)

// Popover shows a popup on click.
//
// TODO: add alignment settings for floating panel
type Popover struct {
	// ButtonChildren are placed inside the button that triggers the
	// popover. A nil value will default to [ButtonLayout].
	ButtonChildren templ.Component

	Panel PanelWindow
}

templ (m Popover) build() {
	<div
		class="relative"
		x-id="
			['dropdown-wrapper']
		"
		x-data="{
			open: false,
		        toggle() {
				if (this.open) {
				    return this.close()
				}
				this.$refs.button.focus()
				this.open = true
			},
			close(focusAfter) {
				if (! this.open) return
				this.open = false
				focusAfter && focusAfter.focus()
			}
		}"
		@focusin.window="! $refs.panel.contains($event.target) && close()"
	>
		<button
			type="button"
			x-ref="button"
			@click="toggle()"
			class="relative cursor-pointer rounded-lg transition hover:bg-gray-900/5 dark:hover:bg-gray-100/5 active:bg-gray-900/10 dark:active:bg-gray-100/10"
			:class="open && 'bg-gray-900/5 dark:bg-gray-100/5'"
		>
			if m.ButtonChildren != nil {
				@m.ButtonChildren
			} else {
				@ButtonLayout{}
			}
		</button>
		<div
			x-cloak
			x-ref="panel"
			x-show="open"
			@click.outside="close($refs.button)"
			x-anchor="$refs.button"
			class="mt-4 z-10"
		>
			@m.Panel
		</div>
	</div>
}

func (m Popover) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// MenuPopover shows a menu on click.
type MenuPopover struct {
	// MenuEntries are displayed in the popover. If the slice is empty,
	// [MenuPopover] is same as [Popover]{}.
	MenuEntries []struct {
		Label string

		SubLabel string

		Attrs templ.Attributes
	}
}

templ (m MenuPopover) buildAtIndex(i int) {
	<div class="flex flex-item h-9 items-center justify-between px-2.5 py-2 gap-2.5 rounded-lg hover:bg-gray-900/5">
		<span class="text-sm text-gray-900/90 whitespace-nowrap">{ m.MenuEntries[i].Label }</span>
		<span class="text-sm text-gray-500/90 whitespace-nowrap">{ m.MenuEntries[i].SubLabel }</span>
	</div>
}

templ (m MenuPopover) buildMenu() {
	<div class="p-2">
		for i := range len(m.MenuEntries) {
			@m.buildAtIndex(i)
		}
	</div>
}

func (m MenuPopover) Render(ctx context.Context, w io.Writer) error {
	popover := Popover{
		ButtonChildren: ButtonLayout{Icon: OpenMenuIcon},
	}

	if len(m.MenuEntries) != 0 {
		popover.Panel = PanelWindow{
			Children: m.buildMenu(),
		}
	}

	return popover.Render(ctx, w)
}

var regions = []templ.Component{
	MenuLink{
		Href: "/NA1",
		Item: MenuItemLayout{Label: "NA1", SubLabel: "North America"},
	},
	MenuLink{
		Href: "/NA1",
		Item: MenuItemLayout{Label: "KR", SubLabel: "Korea"},
	},
}

type RegionPopover struct {
	Region riot.Region
}

templ (m RegionPopover) buildButton() {
	<div class="flex flex-none h-9 w-20 px-2 items-center gap-2 justify-end">
		<span class="text-sm font-bold">
			{ convertRiotRegionToString(m.Region) }
		</span>
		@DownSmallIcon
	</div>
}

templ (m RegionPopover) buildMenu() {
	<ul class="p-2">
		for _, c := range regions {
			@c
		}
	</ul>
}

func (m RegionPopover) Render(ctx context.Context, w io.Writer) error {
	popover := Popover{
		ButtonChildren: m.buildButton(),
		Panel:          PanelWindow{Children: m.buildMenu()},
	}

	return popover.Render(ctx, w)
}

// Deprecated.
type ChampionPopover struct {
	Champion               int
	TotalGamesPlayed       int
	GamesPlayed            int
	Wins, Losses           int
	Kills, Deaths, Assists float32
	KillParticipation      float32
	CS                     int
	CSPerMinute            float32
	DamageDealt            int
	DamageTaken            int
	DamageDeltaEnemy       int
	DamagePercentageTeam   float32
	GoldEarned             int
	GoldDeltaEnemy         int
	GoldPercentageTeam     float32
	VisionScore            int
	PinkWardsBought        int
	LPGain                 int // lp gain for matches that actually have lp deltas?
}

templ (m ChampionPopover) buildRelativeBar() {
	{{
		if m.TotalGamesPlayed == 0 {
			panic("0 games played can't be real")
		}
		ratio := float32(m.GamesPlayed) / float32(m.TotalGamesPlayed)
		class := fmt.Sprintf("w-[%.0f%%]", ratio*100)
	}}
	<div class="flex-none h-3 bg-gray-900/5 w-24">
		<div class={ "h-full", "bg-blue-500/50", class }></div>
	</div>
}

templ (m ChampionPopover) buildButtonLayout() {
	<div class="flex h-9 items-center gap-x-2 px-2">
		@ChampionSprite{ChampionID: m.Champion}
		@m.buildRelativeBar()
		<div class="text-sm text-gray-900/90 dark:text-gray-100/90">
			{ fmt.Sprintf("%+d LP", m.LPGain) }
		</div>
	</div>
}

func (m ChampionPopover) Render(ctx context.Context, w io.Writer) error {
	popover := Popover{
		ButtonChildren: m.buildButtonLayout(),
	}

	return popover.Render(ctx, w)
}
