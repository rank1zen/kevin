package frontend

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal"
	"io"
	"time"
	"github.com/rank1zen/kevin/internal/riot"
)

// Page is the main html component returned the to browser.
type Page struct {
	// ... empty value means no title.
	Title string

	// Content is a body component of the page. A nil value indicates an
	// empty page.
	Content templ.Component
}

templ (m Page) build() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
			<script src="https://unpkg.com/htmx.org@2.0.0" integrity="sha384-wS5l5IKJBvK6sPTKa2WZ1js3d947pvWXbPJ1OmWfEuxLgeHcEbjUUA5i9V5ZkpCw" crossorigin="anonymous"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/anchor@3.x.x/dist/cdn.min.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/focus@3.x.x/dist/cdn.min.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			if m.Title != "" {
				<title>
					{ m.Title }
				</title>
			}
		</head>
		<body
			x-data="{
				isModalOpen: false
			}"
			@keydown.escape="isModalOpen = false"
		>
			<div class="bg-white min-h-screen dark:bg-gray-950">
				if m.Content != nil {
					@m.Content
				}
			</div>
		</body>
	</html>
}

func (m Page) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type SummonerPage struct {
	Region riot.Region

	PUUID string

	Name, Tag string

	Rank *internal.RankDetail

	LastUpdated time.Time
}

templ (m SummonerPage) buildContent() {
	<div>
		@buildHeaderBar() {
			@PageHeaderLayout{Region: m.Region}
		}
		<div class="flex justify-center">
			<div>
				<div class="flex justify-between items-center px-4 pt-10 w-full mx-auto">
					<div class="flex items-center gap-4">
						@h1(fmt.Sprintf("%s#%s", m.Name, m.Tag))
						@RankWidget{Rank: m.Rank, UsePill: true, ShowTierName: true}
					</div>
					<div>
						// placeholder
					</div>
				</div>
				<ol
					class="flex flex-col justify-center px-4 pt-10 w-full gap-8"
				>
					@MatchHistoryLoader{Region: riot.RegionNA1, PUUID: m.PUUID, Date: time.Now()}
					@MatchHistoryLoader{Region: riot.RegionNA1, PUUID: m.PUUID, Date: time.Now().Add(-24*time.Hour)}
					@MatchHistoryLoader{Region: riot.RegionNA1, PUUID: m.PUUID, Date: time.Now().Add(-48*time.Hour)}
				</ol>
			</div>
		</div>
	</div>
}

func (m SummonerPage) Render(ctx context.Context, w io.Writer) error {
	page := Page{
		Title:   fmt.Sprintf("%s#%s - Kevin", m.Name, m.Tag),
		Content: m.buildContent(),
	}

	return page.Render(ctx, w)
}

type NoSummonerPage struct {
	Region riot.Region

	Name string

	Tag string
}

templ (m NoSummonerPage) build() {
	<div>
		@buildHeaderBar() {
			@PageHeaderLayout{Region: m.Region}
		}
		<div>
			Summoner not found
		</div>
	</div>
}

func (m NoSummonerPage) Render(ctx context.Context, w io.Writer) error {
	page := Page{
		Title:   fmt.Sprintf("Summoner not found - Kevin"),
		Content: m.build(),
	}

	return page.Render(ctx, w)
}

type HomePage struct{
	Region riot.Region
}

templ (m HomePage) buildContent() {
	<div>
		@buildHeaderBar() {
			@PageHeaderLayout{Region: m.Region}
		}
	</div>
}

func (m HomePage) Render(ctx context.Context, w io.Writer) error {
	page := Page{
		Title:   fmt.Sprintf("Kevin"),
		Content: m.buildContent(),
	}

	return page.Render(ctx, w)
}
