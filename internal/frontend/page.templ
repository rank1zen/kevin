package frontend

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal"
	"io"
	"time"
	"github.com/rank1zen/kevin/internal/riot"
	"encoding/json"
)

// Page is the main html component returned the to browser.
type Page struct {
	// ... empty value means no title.
	Title string

	// HeaderChildren is the content to show in header.
	HeaderChildren templ.Component

	// Content is a body component of the page. A nil value indicates an
	// empty page.
	Content templ.Component
}

templ (m Page) build() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
			<script src="https://unpkg.com/htmx.org@2.0.0" integrity="sha384-wS5l5IKJBvK6sPTKa2WZ1js3d947pvWXbPJ1OmWfEuxLgeHcEbjUUA5i9V5ZkpCw" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/htmx-ext-json-enc@2.0.1/json-enc.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/anchor@3.x.x/dist/cdn.min.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/focus@3.x.x/dist/cdn.min.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			if m.Title != "" {
				<title>
					{ m.Title }
				</title>
			}
		</head>
		<body
			x-data="{
				isModalOpen: false
			}"
			@keydown.escape="isModalOpen = false"
		>
			if m.HeaderChildren != nil {
				<div class="sticky top-0 z-10 bg-white dark:bg-gray-950">
					@m.HeaderChildren
				</div>
			}
			<div class="bg-white min-h-screen dark:bg-gray-950">
				if m.Content != nil {
					@m.Content
				}
			</div>
			<div class="flex items-center justify-center">
				<div>
					Some example footer content
				</div>
			</div>
		</body>
	</html>
}

func (m Page) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// SummonerPage represents the page for a summoner.
type SummonerPage struct {
	// Region specifies a riot region. All results in the page belong to
	// this region.
	Region riot.Region

	PUUID riot.PUUID

	Name, Tag string

	Rank *internal.RankDetail

	LastUpdated time.Time

	// GetChampionsRequest is sent to the server upon load.
	GetChampionsRequest ZGetSummonerChampionsRequest
}

templ (m SummonerPage) buildMatchListDay(offset int) {
	{{
		now := time.Now() // FIXME: this should be the location of the browser client
		y, mo, d := now.Date()
		today := time.Date(y, mo, d, 0, 0, 0, 0, now.Location())

		offset := today.Add(time.Duration(offset) * (-24*time.Hour))

		vals := struct{
			Region riot.Region `json:"region"`
			PUUID riot.PUUID `json:"puuid"`
			Date  int64 `json:"date"`
		}{
			m.Region,
			m.PUUID,
			offset.Unix(),
		}

		bytes, _ := json.Marshal(vals)
	}}
	<div>
		<h2 class="font-bold text-gray-900/90 dark:text-gray-100/90 pb-3">
			{ offset.Format("Monday, Jan 2") }
		</h2>
		<div
			hx-post="/summoner/matchlist"
			hx-trigger="load once"
			hx-vals={ string(bytes) }
		>
			Spinning...
		</div>
	</div>
}

templ (m SummonerPage) buildContent() {
	{{
		bytes, _ := json.Marshal(m.GetChampionsRequest)
	}}
	<div>
		<div class="w-full">
			<div class="flex justify-between items-center px-4 pt-10 w-full mx-auto">
				<div class="flex items-center gap-4">
					@h1(fmt.Sprintf("%s#%s", m.Name, m.Tag))
					@RankWidget{Rank: m.Rank, UsePill: true, ShowTierName: true}
				</div>
				<div>
					// placeholder
				</div>
			</div>
		</div>
		<div class="flex justify-center">
			<div class="flex gap-x-9 mt-9">
				<ol class="flex flex-col justify-center gap-8 w-[734px]">
					for i := range 7 {
						@m.buildMatchListDay(i)
					}
				</ol>
				<div class="w-64">
					<div class="h-64">
						<h2 class="font-bold text-gray-900/90 dark:text-gray-100/90 pb-4">
							Last 7 Days
						</h2>
						<div
							hx-post="/summoner/champions"
							hx-trigger="load once"
							hx-ext="json-enc"
							hx-vals={ string(bytes) }
							class="w-[208px] h-[152px]"
						>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

func (m SummonerPage) Render(ctx context.Context, w io.Writer) error {
	page := Page{
		Title:   fmt.Sprintf("%s#%s - Kevin", m.Name, m.Tag),
		HeaderChildren: PageHeaderLayout{Region: m.Region},
		Content: m.buildContent(),
	}

	return page.Render(ctx, w)
}

type NoSummonerPage struct {
	Region riot.Region

	Name string

	Tag string
}

templ (m NoSummonerPage) build() {
	<div>
		@buildHeaderBar() {
			@PageHeaderLayout{Region: m.Region}
		}
		<div>
			Summoner not found
		</div>
	</div>
}

func (m NoSummonerPage) Render(ctx context.Context, w io.Writer) error {
	page := Page{
		Title:   fmt.Sprintf("Summoner not found - Kevin"),
		Content: m.build(),
	}

	return page.Render(ctx, w)
}

type HomePage struct{
	Region riot.Region
}

func (m HomePage) Render(ctx context.Context, w io.Writer) error {
	page := Page{
		Title:   fmt.Sprintf("Kevin"),
		HeaderChildren: PageHeaderLayout{Region: m.Region},
	}

	return page.Render(ctx, w)
}
