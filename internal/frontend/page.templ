package frontend

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal"
	"github.com/rank1zen/kevin/internal/riot"
	"io"
	"time"
)

// Page is the main html component returned the to browser.
type Page struct {
	// ... empty value means no title.
	Title string

	// HeaderChildren is the content to show in header.
	HeaderChildren templ.Component

	// Content is a body component of the page. A nil value indicates an
	// empty page.
	Content templ.Component
}

templ (m Page) build() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
			<script src="https://unpkg.com/htmx.org@2.0.0" integrity="sha384-wS5l5IKJBvK6sPTKa2WZ1js3d947pvWXbPJ1OmWfEuxLgeHcEbjUUA5i9V5ZkpCw" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/htmx-ext-json-enc@2.0.1/json-enc.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/anchor@3.x.x/dist/cdn.min.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/focus@3.x.x/dist/cdn.min.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			if m.Title != "" {
				<title>
					{ m.Title }
				</title>
			}
		</head>
		<body
			x-data="{
				isModalOpen: false
			}"
			@keydown.escape="isModalOpen = false"
			:class="isModalOpen && 'overflow-hidden'"
		>
			if m.HeaderChildren != nil {
				<div class="sticky top-0 z-10 bg-white dark:bg-gray-950">
					@m.HeaderChildren
				</div>
			}
			<div class="bg-white min-h-screen dark:bg-gray-950">
				if m.Content != nil {
					@m.Content
				}
			</div>
			<div class="flex items-center justify-center">
				<div>
					Some example footer content
				</div>
			</div>
		</body>
	</html>
}

func (m Page) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// SummonerPage represents the page for a summoner.
type SummonerPage struct {
	// Region specifies a riot region. All results in the page belong to
	// this region.
	Region riot.Region

	PUUID riot.PUUID

	Name, Tag string

	LastUpdated time.Time

	Rank *internal.RankDetail

	LiveMatchLoader LiveMatchModalWindowLoader

	ChampionsLoader ChampionsLoader

	MatchHistoryLoaders []MatchHistoryListLoader
}

templ (m SummonerPage) buildContent() {
	<div class="px-2">
		<div class="flex items-center gap-x-2 justify-between">
			<div class="flex items-center gap-x-2">
				<h1 class="font-bold text-2xl text-gray-900/90 dark:text-gray-100/90">
					{ fmt.Sprintf("%s#%s", m.Name, m.Tag) }
				</h1>
				@RankWidget{Rank: m.Rank, ShowTierName: true, Size: TextSizeSM}
			</div>
			<div class="flex items-center gap-x-2">
				@Modal{ButtonChildren: ButtonLayout{Icon: ViewListIcon}, PanelChildren: m.LiveMatchLoader}
				@Modal{ButtonChildren: ButtonLayout{Icon: OpenMenuIcon}, PanelChildren: m.LiveMatchLoader}
			</div>
		</div>
		<div>
			for i := range 7 {
				<div class="mt-4">
					<h2 class="font-bold text-gray-900/90 dark:text-gray-100/90">
						{ m.MatchHistoryLoaders[i].Request.Date.Format("Monday, Jan 2") }
					</h2>
					<div class="mt-3">
						@m.MatchHistoryLoaders[i]
					</div>
				</div>
			}
		</div>
	</div>
}

func (m SummonerPage) Render(ctx context.Context, w io.Writer) error {
	page := Page{
		Title:          fmt.Sprintf("%s#%s - Kevin", m.Name, m.Tag),
		HeaderChildren: PageHeaderLayout{Region: m.Region},
		Content:        m.buildContent(),
	}

	return page.Render(ctx, w)
}

type NoSummonerPage struct {
	Region riot.Region

	Name string

	Tag string
}

templ (m NoSummonerPage) build() {
	<div>
		@buildHeaderBar() {
			@PageHeaderLayout{Region: m.Region}
		}
		<div>
			Summoner not found
		</div>
	</div>
}

func (m NoSummonerPage) Render(ctx context.Context, w io.Writer) error {
	page := Page{
		Title:   fmt.Sprintf("Summoner not found - Kevin"),
		Content: m.build(),
	}

	return page.Render(ctx, w)
}

type HomePage struct {
	Region riot.Region
}

func (m HomePage) Render(ctx context.Context, w io.Writer) error {
	page := Page{
		Title:          fmt.Sprintf("Kevin"),
		HeaderChildren: PageHeaderLayout{Region: m.Region},
	}

	return page.Render(ctx, w)
}
