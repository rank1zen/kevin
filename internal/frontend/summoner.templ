package frontend

import (
	"fmt"
	"github.com/rank1zen/kevin/internal"
	"github.com/rank1zen/kevin/internal/ddragon"
)

templ SummonerNotFoundView(platform, name, tagline string) {
	<div class="flex flex-col">
		<button hx-get={ "/update?name=name" }>
			Request riot { name + tagline } on { platform }
		</button>
	</div>
}

templ SummonerMatchView(puuid, name string, rank *internal.RankDetail) {
	<div class="flex flex-col">
		@SummonerHeaderBar(puuid, name, rank)
		<div class="flex flex-col max-w-4xl mx-auto">
			<div class="flex items-center gap-1.5">
				@TextTitle(name)
				@RankTag(rank)
			</div>
			<div class="flex justify-between">
				@ViewSwitcherRow(
					NewViewSwitcher(
						"view-list-symbolic.svg",
						"Matches",
						templ.SafeURL(fmt.Sprintf("/summoner/%s", puuid)),
					),
					NewViewSwitcher(
						"view-grid-symbolic.svg",
						"Champions",
						templ.SafeURL(fmt.Sprintf("/summoner/%s/champions", puuid)),
					),
				)
				<div class="flex items-center gap-1 p-2">
					<img class="size-4" src="/static/edit-find-symbolic.svg"/>
				</div>
			</div>
			<div
				class="flex flex-col"
				hx-get={ fmt.Sprintf("/summoner/%s/matchlist", puuid) }
				hx-trigger="load once"
			></div>
		</div>
	</div>
}

templ SummonerChampionView(puuid, name string, rank *internal.RankDetail, champions []internal.SummonerChampion) {
	<div class="flex flex-col">
		@SummonerHeaderBar(puuid, name, rank)
		<div class="flex flex-col max-w-4xl mx-auto">
			<div class="flex items-center gap1.5">
				@TextTitle(name)
				@RankTag(rank)
			</div>
			<div class="flex justify-between">
				@ViewSwitcherRow(
					NewViewSwitcher(
						"view-list-symbolic.svg",
						"Matches",
						templ.SafeURL(fmt.Sprintf("/summoner/%s", puuid)),
					),
					NewViewSwitcher(
						"view-grid-symbolic.svg",
						"Champions",
						templ.SafeURL(fmt.Sprintf("/summoner/%s/champions", puuid)),
					),
				)
			</div>
			<div class="flex wrap">
				for _, champ := range champions {
					@SummonerChampionCard(champ)
				}
			</div>
		</div>
	</div>
}

templ SummonerMatchlist(puuid string, page int, matches []internal.SummonerMatch) {
	for _, m := range matches {
		@SummonerMatchRow(m)
	}
	if !(len(matches) < 10) {
		<div
			hx-get={ fmt.Sprintf("/summoner/%s/matchlist?page=%d", puuid, page+1) }
			hx-swap="outerHTML"
			hx-trigger="revealed"
		>
			Loading more...
		</div>
	}
}

templ SummonerMatchHeader() {
	<div class="flex items-center border-b border-gray-100 sticky top-[56px] z-20 px-2 rounded justify-between odd:bg-white even:bg-gray-50 text-xs text-gray-300 font-bold">
		<div class="flex flex-none gap-1 items-center w-[92px]">
			<span>
				Champion
			</span>
		</div>
		<div class="flex flex-none items-center w-24">
			<span>
				KDA
			</span>
		</div>
		<div class="flex flex-none items-center w-16">
			<span>
				CS
			</span>
		</div>
		<div class="flex flex-none items-center w-16">
			<span>
				CSM
			</span>
		</div>
		<div class="flex flex-none w-[72px]">
			<span>
				Runes
			</span>
		</div>
		<div class="flex flex-none w-[200px]">
			<span>
				Items
			</span>
		</div>
		<div class="flex flex-none items-center w-20 justify-end">
			<span>
				CSD@END
			</span>
		</div>
		<div class="flex flex-none items-center w-20 justify-end">
			<span>
				GD@END
			</span>
		</div>
		<div class="flex flex-none items-center w-14 justify-end">
			<span>
				DMG%
			</span>
		</div>
		<div class="flex flex-none items-center w-14 justify-end">
			<span>
				LP
			</span>
		</div>
		<div class="flex size-9 flex-none"></div>
	</div>
}

templ SummonerMatchRow(m internal.SummonerMatch) {
	<div class="flex tabular-nums items-center px-2 py-2 rounded-lg justify-between odd:bg-white even:bg-gray-50">
		<div class="flex flex-none gap-1 items-center">
			@ChampionSmallSprite(ddragon.ChampionID(m.Champion))
			@sprite(internal.GetSpellSprite(m.Summoners[0]))
			@sprite(internal.GetSpellSprite(m.Summoners[1]))
		</div>
		<div class="flex flex-none items-center w-24 justify-center">
			<span>
				{ fmt.Sprintf("%d/%d/%d", m.Kills, m.Deaths, m.Assists) }
			</span>
		</div>
		<div class="flex flex-none items-center w-16 justify-center">
			<span>
				{ fmt.Sprintf("%d", m.CreepScore) }
			</span>
		</div>
		<div class="flex flex-none items-center w-16 justify-center">
			<span>
				{ fmt.Sprintf("%.1f", m.CreepScorePerMinute) }
			</span>
		</div>
		<div class="flex flex-none">
			@RuneButton(m.Runes)
		</div>
		<div class="flex flex-none">
			@ItemRow(m.Items)
		</div>
		<div class="flex flex-none items-center w-14 justify-end">
			<span>
				if m.LpDelta != nil {
					{ fmt.Sprintf("%d", *m.LpDelta) }
				} else {
					+21
				}
			</span>
		</div>
		<div class="flex flex-none">
			<a
				title="Open match page"
				href={ templ.SafeURL(fmt.Sprintf("/match/%s", m.MatchID)) }
				class="flex p-2.5 rounded hover:bg-gray-100"
			>
				<img class="w-4 h-4 flex-none" src="/static/external-link-symbolic.svg"/>
			</a>
		</div>
	</div>
}

templ SummonerHeaderBar(puuid, name string, rank *internal.RankDetail) {
	@HeaderBar(
		SummonerSearchBar(puuid, name, rank),
		SummonerSearchBar(puuid, name, rank),
		SummonerSearchBar(puuid, name, rank),
	)
	// <div class="sticky top-0 bg-white flex justify-between items-center p-2 z-20">
	// 	@SummonerSearchBar(puuid, name, rank)
	// 	<div class="flex">
	// 		@MenuButton("/static/open-menu-symbolic.svg", Menu())
	// 	</div>
	// </div>
}

templ SummonerSearchBar(puuid, name string, rank *internal.RankDetail) {
	<div
		x-data="{
			open: false,
			toggle() {
				this.open = this.open? this.close() : true
				$nextTick(() => { $focus.focus($refs.searchInput) })
			},
			close() {
				this.open = false
			}
		}"
		class="flex grow max-w-2xl items-center justify-between"
	>
		// search div
		<div
			x-transition:enter="transition-discrete"
			x-show="!open"
			@click="toggle()"
			class="flex grow w-full items-center rounded-lg bg-gray-100 justify-between"
		>
			<div class="flex items-center">
				<span class="font-bold text-sm whitespace-nowrap">
					{ name }
				</span>
				@RankTag(rank)
			</div>
			<button
				type="button"
				hx-get={ fmt.Sprintf("/fetch/summoner?puuid=%s&platform=NA1", puuid) }
				hx-trigger="click"
				class="flex flex-none p-2.5 items-center justify-center"
			>
				<img class="size-4" src="/static/view-refresh-symbolic.svg"/>
			</button>
		</div>
		// search input
		<div
			x-transition:enter="transition-discrete"
			x-show="open"
			@click.outside="close()"
			class="flex grow max-w-2xl items-center rounded-lg bg-gray-100 justify-between"
		>
			<input
				type="text"
				x-ref="searchInput"
				class="size-full block bg-gray-100 p-2 focus:outline-0 transition-color inset-ring-2 inset-ring-blue-500/50 rounded-l-lg"
			/>
			<button
				type="button"
				@click="close()"
				class="flex flex-none p-2.5 items-center justify-center"
			>
				<img class="size-4" src="/static/view-window-close-symbolic.svg"/>
			</button>
		</div>
	</div>
}

templ SummonerChampionCard(champ internal.SummonerChampion) {
	<div class="flex-col">
		<div class="flex justify-between items-center">
			@TextLabel("DMG")
			<div>
				17,200
			</div>
		</div>
	</div>
}
