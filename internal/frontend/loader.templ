package frontend

import (
	"context"
	"encoding/json"
	"io"
)

type LoaderType int

const (
	LoaderTypeOnLoad LoaderType = iota
	LoaderTypeOnReveal
)

// Loader is a component that requets the server for data.
type Loader struct {
	Path string

	// Type is the trigger event. Default is [LoaderTypeOnLoad].
	Type LoaderType

	// Data will be sent to the server in JSON. A nil value indicates no
	// data will be sent.
	Data any

	// Children are displayed in the loader. TODO: A nil value indicates
	// [...] will be used.
	Children templ.Component
}

func (m Loader) generateHXTrigger() string {
	switch m.Type {
	case LoaderTypeOnReveal:
		return "revealed"
	default:
		return "load once"
	}
}

templ (m Loader) build() {
	{{
		var bytes []byte
		if m.Data != nil {
			var err error
			bytes, err = json.Marshal(m.Data)
			if err != nil {
				panic("Loader.build: failed to encode data to json")
			}
		}
	}}
	<div
		hx-post={ m.Path }
		hx-trigger={ m.generateHXTrigger() }
		hx-swap="outerHTML"
		hx-ext="json-enc"
		if m.Data != nil {
			hx-vals={ string(bytes) }
		}
	>
		if m.Children != nil {
			@m.Children
		} else {
			Some loading symbol...
		}
	</div>
}

func (m Loader) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// MatchHistoryListLoader requests the server for [MatchHistoryList].
//
// Uses [LoaderTypeOnLoad].
type MatchHistoryListLoader struct {
	Request MatchHistoryRequest
}

// TODO: spinners can be factored into seperate components.
templ (m MatchHistoryListLoader) buildSpinner() {
	<div class="flex items-center justify-center h-15 w-100">
		Spinning...
	</div>
}

func (m MatchHistoryListLoader) Render(ctx context.Context, w io.Writer) error {
	list := List{Items: []templ.Component{}}
	list.Items = append(list.Items, m.buildSpinner())

	loader := Loader{
		Path:     "/summoner/matchlist",
		Data:     m.Request,
		Children: list,
	}

	return loader.Render(ctx, w)
}

// LiveMatchModalWindowLoader requests the server for [LiveMatchModalLayout].
//
// Uses [LoaderTypeOnReveal].
type LiveMatchModalWindowLoader struct {
	Request GetLiveMatchRequest
}

// TODO: spinners can be factored into seperate components.
templ (m LiveMatchModalWindowLoader) buildSpinner() {
	<div>
		Spinning...
	</div>
}

func (m LiveMatchModalWindowLoader) Render(ctx context.Context, w io.Writer) error {
	loader := Loader{
		Path:     "/summoner/live",
		Type:     LoaderTypeOnReveal,
		Data:     m.Request,
		Children: ModalLayout{Children: m.buildSpinner()},
	}

	return loader.Render(ctx, w)
}

// ChampionsLoader requests the server for [ChampionModalLayout].
//
// Uses [LoaderTypeOnReveal].
type ChampionsLoader struct {
	Request ZGetSummonerChampionsRequest
}

templ (m ChampionsLoader) buildSpinner() {
	<div>
		Spinning...
	</div>
}

func (m ChampionsLoader) Render(ctx context.Context, w io.Writer) error {
	loader := Loader{
		Path:     "/summoner/champions",
		Type:     LoaderTypeOnReveal,
		Data:     m.Request,
		Children: ModalLayout{Children: m.buildSpinner()},
	}

	return loader.Render(ctx, w)
}
