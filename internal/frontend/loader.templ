package frontend

import (
	"context"
	"encoding/json"
	"io"

	"github.com/rank1zen/kevin/internal/riot"
	"time"
)

type LoaderType int

const (
	LoaderTypeOnLoad LoaderType = iota
	LoaderTypeOnReveal
)

// Loader is a component that fetches the server for data.
type Loader struct {
	Path string

	// Type is the trigger event to fetch the path.
	Type LoaderType
}

func (m Loader) generateHXTrigger() string {
	switch m.Type {
	case LoaderTypeOnReveal:
		return "reveal"
	default:
		return "load once"
	}
}

templ (m Loader) build() {
	<div
		hx-post={ m.Path }
		hx-trigger={ m.generateHXTrigger() }
		hx-swap="outerHTML"
	>
		Some loading symbol...
	</div>
}

func (m Loader) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type MatchHistoryLoader struct {
	Region riot.Region

	PUUID string

	Date time.Time
}

func (m MatchHistoryLoader) generateJSONVals() string {
	bytes, _ := json.Marshal(struct {
		Region riot.Region `json:"region"`
		PUUID string `json:"puuid"`
		Date  int64 `json:"date"`
	}{
		m.Region,
		m.PUUID,
		m.Date.Truncate(24*time.Hour).Unix(),
	})

	return string(bytes)
}

templ (m MatchHistoryLoader) build() {
	<div
		hx-post="/summoner/matchlist"
		hx-trigger="load once"
		hx-swap="outerHTML"
		hx-vals={ m.generateJSONVals() }
		class="w-full h-32 flex items-center justify-center"
	>
		<span>Loading next page...</span>
	</div>
}

func (m MatchHistoryLoader) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}
