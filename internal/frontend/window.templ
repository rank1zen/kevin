// TODO: move modal window to layouts
package frontend

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal"
	"io"
	"time"
)

// ModalWindow is a floating window with fixed height.
type ModalWindow struct { // TODO: rename to layout
	// HeaderChildren are placed in the header. A nil value indicates no
	// header.
	HeaderChildren templ.Component

	// Children are placed in the main body. A nil value indicates an empty
	// page.
	Children templ.Component
}

templ (m ModalWindow) build() {
	if m.HeaderChildren != nil {
		<div>
			<div class="sticky">
				@m.HeaderChildren
			</div>
			<div>
				if m.Children != nil {
					@m.Children
				}
			</div>
		</div>
	} else {
		<div>
			if m.Children != nil {
				@m.Children
			}
		</div>
	}
}

func (m ModalWindow) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// LiveMatchModalWindow is a modal window for a live match.
type LiveMatchModalWindow struct {
	AverageRank *internal.RankDetail

	StartTime time.Time

	BlueSide, RedSide [5]LiveMatchRowLayout
}

templ (m LiveMatchModalWindow) makeHeaderContent() {
	<div class="flex items-center justify-between gap-2">
		<div class="flex">
			{ fmt.Sprintf("%v", m.StartTime) }
		</div>
		<div class="flex">
			Avg Rank Grandmaster // Avg Rank Grandmaster
		</div>
	</div>
}

templ (m LiveMatchModalWindow) buildChildren() {
	{{
		blueSide, redSide := []templ.Component{}, []templ.Component{}
		for i := range 5 {
			blueSide = append(blueSide, m.BlueSide[i])
			redSide = append(redSide, m.RedSide[i])
		}
	}}
	<div class="px-2">
		<div class="">
			<h2 class="font-bold text-base text-gray-900/90 dark:text-gray-100/90 mt-9">
				Blue Side
			</h2>
			<div class="mt-3">
				@List{Items: blueSide}
			</div>
			<h2 class="font-bold text-base text-gray-900/90 dark:text-gray-100/90 mt-9">
				Red Side
			</h2>
			<div class="mt-3">
				@List{Items: redSide}
			</div>
		</div>
	</div>
}

func (m LiveMatchModalWindow) Render(ctx context.Context, w io.Writer) error {
	window := ModalWindow{
		HeaderChildren: nil,
		Children:       m.buildChildren(),
	}

	return window.Render(ctx, w)
}

type NoLiveMatchModalWindow struct{}

templ (m NoLiveMatchModalWindow) makeHeaderContent() {
}

templ (m NoLiveMatchModalWindow) makeContent() {
	<div class="flex flex-col items-center justify-center">
		<span class="text-base">
			Currently not in live game
		</span>
	</div>
}

func (m NoLiveMatchModalWindow) Render(ctx context.Context, w io.Writer) error {
	modal := ModalWindow{
		HeaderChildren: m.makeHeaderContent(),
		Children:       m.makeContent(),
	}

	return modal.Render(ctx, w)
}

templ exitModal() {
	<button
		type="button"
		@click="isModalOpen = false"
		class="size-7 p-1.5 bg-gray-900/5 rounded-full"
	>
		@WindowCloseIcon
	</button>
}
