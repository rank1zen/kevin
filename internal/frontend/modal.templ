package frontend

import (
	"context"
	"io"
)

// Modal triggers a modal panel on click.
type Modal struct {
	// ButtonChildren are placed inside the button that triggers the modal.
	// A nil value will default to [ButtonLayout].
	ButtonChildren templ.Component

	// PanelChildren are placed centrally, in a floating layer. A nil value
	// indicates no children.
	PanelChildren templ.Component
}

templ (m Modal) build() {
	<div
		x-id="['modal-wrapper']"
		class="relative"
	>
		<button
			type="button"
			x-ref="button"
			@click="isModalOpen = true"
			class="relative cursor-pointer rounded-lg transition hover:bg-gray-900/5 dark:hover:bg-gray-100/5 active:bg-gray-900/20 dark:active:bg-gray-100/20"
			:class="isModalOpen && 'bg-gray-900/5 dark:bg-gray-100/5'"
		>
			if m.ButtonChildren != nil {
				@m.ButtonChildren
			} else {
				@ButtonLayout{}
			}
		</button>
		<div
			x-cloak
			x-ref="panel"
			x-show="isModalOpen"
			x-transition.opacity
			class="fixed inset-0 flex items-end z-30 bg-gray-900/20"
		>
			<div class="bg-white dark:bg-black shadow w-full rounded-t-2xl h-3/5 overflow-auto">
				if m.PanelChildren != nil {
					@m.PanelChildren
				}
			</div>
		</div>
	</div>
}

func (m Modal) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// ExitModalButton can be used in a [Modal] component to close the window.
type ExitModalButton struct{}

templ (m ExitModalButton) build() {
	<button
		type="button"
		class="cursor-pointer size-7 rounded-full flex items-center justify-center bg-gray-900/5 dark:bg-gray-100/5"
		@click="isModalOpen = false"
	>
		@WindowCloseIcon
	</button>
}

func (m ExitModalButton) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}
