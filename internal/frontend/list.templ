package frontend

import "io"
import "context"

type ListStyle int

const (
	ListStyleFlat ListStyle = iota
	ListStyleRaised
)

// List is a list component.
type List struct {
	// Title is a title displayed at the top of the list. An empty value
	// indicates no title.
	Title string

	Style ListStyle

	Items []struct {
		ListItemChildren []templ.Component
	}
}

templ (m List) build() {
	<div class="">
		@Text{S: m.Title, Style: TextStyleHeading}
		<ol>
			for _, item := range m.Items {
				@ListItem{
					Style: m.Style,
					Children: item.ListItemChildren,
				}
			}
		</ol>
	</div>
}

func (m List) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type ActionRow struct {
	Title string

	Subtitle string

	IconPath string
}

templ (m ActionRow) build() {
	<li class="flex justify-between items-center p-2">
		<div>
			@Text{S: m.Title, Style: TextStyleHeading}
			@Text{S: m.Subtitle, Style: TextStyleLabel}
		</div>
		@Icon(m.IconPath)
	</li>
}

func (m ActionRow) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type ListItem struct {
	Style ListStyle

	Children []templ.Component
}

func (m ListItem) gen() string {
	classes := []string{
		"flex",
		"items-center",
		"justify-between",
		"p-2",
	}

	if m.Style == ListStyleFlat {
		classes = append(classes, "bg-transparent", "rounded-lg", "hover:bg-gray-900/5")
	} else if m.Style == ListStyleRaised {
		classes = append(classes, "shadow-lg", "bg-white", "hover:bg-gray-900/5")
	}

	return joinClasses(classes)
}

templ (m ListItem) build() {
	if len(m.Children) > 0 {
		<li>
			<div class={ m.gen() }>
				for _, child := range m.Children {
					@child
				}
			</div>
		</li>
	} else {
		<li>
		</li>
	}
}

func (m ListItem) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}
