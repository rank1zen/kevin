package frontend

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal"
	"github.com/rank1zen/kevin/internal/riot"
	"io"
)

type HeaderLayout struct {
	StartChildren templ.Component

	CenterChildren templ.Component

	EndChildren templ.Component
}

templ (m HeaderLayout) build() {
	<div class="flex w-full h-13 gap-x-2 justify-between items-center px-2">
		if m.StartChildren != nil {
			<div>
				@m.StartChildren
			</div>
		}
		if m.CenterChildren != nil {
			<div class="flex-1">
				@m.CenterChildren
			</div>
		}
		if m.EndChildren != nil {
			<div>
				@m.EndChildren
			</div>
		}
	</div>
}

func (m HeaderLayout) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type PageHeaderLayout struct {
	Region riot.Region
}

templ (m PageHeaderLayout) buildHeaderStart() {
	<div class="flex gap-2">
		<div class="size-9 transition flex items-center justify-center rounded-lg hover:bg-gray-900/5 dark:hover:bg-gray-100/5">
			<span>K</span>
		</div>
	</div>
}

templ (m PageHeaderLayout) buildHeaderCenter() {
	<div class="flex gap-2 justify-center">
		@RegionPopover{Region: m.Region}
		@SummonerSearchBar{}
	</div>
}

templ (m PageHeaderLayout) buildHeaderEnd() {
	<div class="flex gap-2">
		@MenuPopover{}
	</div>
}

func (m PageHeaderLayout) Render(ctx context.Context, w io.Writer) error {
	c := HeaderLayout{
		StartChildren:  m.buildHeaderStart(),
		CenterChildren: m.buildHeaderCenter(),
		EndChildren:    m.buildHeaderEnd(),
	}

	return c.Render(ctx, w)
}

type MenuItemLayout struct {
	Label string

	SubLabel string
}

templ (m MenuItemLayout) build() {
	<div class="flex flex-item h-7 items-center justify-between px-3 gap-3">
		<span class="text-sm text-gray-900/90 dark:text-gray-100/90  whitespace-nowrap">{ m.Label }</span>
		<span class="text-sm text-gray-500/90 whitespace-nowrap">{ m.SubLabel }</span>
	</div>
}

func (m MenuItemLayout) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// MatchHistoryRowLayout displays a match in a summoner's match history.
type MatchHistoryRowLayout struct {
	MatchID string

	ChampionWidget ChampionWidget

	KDAWidget KDAWidget

	CSWidget CSWidget

	RuneWidget RuneWidget

	ItemWidget ItemWidget

	// RankChange is the rank after the match. A nil value means the store
	// did not record a rank after the match.
	RankChange *internal.RankDetail

	// LPChange is the lp change after the match. TODO: A nil value means ...
	LPChange *int

	Win bool
}

templ (m MatchHistoryRowLayout) build() {
	<div class="flex flex-none h-15 justify-evenly items-center">
		@m.ChampionWidget
		@m.KDAWidget
		@m.CSWidget
		@m.RuneWidget
		@m.ItemWidget
		<div class="h-9">
			if m.RankChange != nil {
				@RankWidget{Rank: m.RankChange, Size: TextSizeXS}
			} else {
				<div class="text-sm font-semibold text-gray-900/90 dark:text-gray-100/90">
					Unknown
				</div>
			}
			if m.Win {
				<div class="text-xs text-green-500/90">
					if m.LPChange != nil {
						{ fmt.Sprintf("WIN %+d", m.LPChange) }
					} else {
						{ fmt.Sprintf("WIN +??") }
					}
				</div>
			} else {
				<div class="text-xs text-red-500/90">
					if m.LPChange != nil {
						{ fmt.Sprintf("LOSS %+d", m.LPChange) }
					} else {
						{ fmt.Sprintf("LOSS +??") }
					}
				</div>
			}
		</div>
	</div>
}

func (m MatchHistoryRowLayout) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// LiveMatchRowLayout displays a participant in an on-going match.
type LiveMatchRowLayout struct {
	MatchID string

	ChampionWidget ChampionWidget

	RuneWidget RuneWidget

	TeamID int

	PUUID riot.PUUID

	Name, Tag string

	Rank *internal.RankDetail
}

templ (m LiveMatchRowLayout) build() {
	<div class="flex h-15 gap-x-4 px-4 justify-between items-center">
		<div class="flex gap-x-4">
			@m.ChampionWidget
			<div class="flex-1 min-w-0 h-9">
				<div class="text-sm text-semibold text-gray-900/90 dark:text-gray-100/90 whitespace-nowrap">
					{ m.Name + "#" + m.Tag }
				</div>
				@RankWidget{Rank: m.Rank, Size: TextSizeXS}
			</div>
		</div>
		<div class="flex gap-x-4">
			@m.RuneWidget
		</div>
	</div>
}

func (m LiveMatchRowLayout) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// ButtonLayout is a simple button layout.
type ButtonLayout struct {
	// IconPath is the icon on the button. If empty, no icon is used.
	Icon Icon

	// Label is the text on the button. If empty, no label is used.
	Label string
}

templ (m ButtonLayout) build() {
	if m.Label != "" {
		<div class="flex flex-none h-9 w-32 gap-2 items-center justify-center">
			if m.Icon != nil {
				@m.Icon
			}
			<span class="whitespace-nowrap font-bold text-sm text-gray-900/90 dark:text-gray-100/90">
				{ m.Label }
			</span>
		</div>
	} else {
		<div class="flex flex-none size-9 items-center justify-center">
			if m.Icon != nil {
				@m.Icon
			}
		</div>
	}
}

func (m ButtonLayout) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type ThinButton struct {
	// IconPath is the icon on the button. If empty, no icon is used.
	IconPath string
}

templ (m ThinButton) build() {
	<div class="flex flex-none w-6 h-9 items-center justify-center">
		@staticIcon(m.IconPath)
	</div>
}

func (m ThinButton) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type ChampionModalRowLayout struct {
	ChampionWidget ChampionWidget

	GamesPlayed int

	Wins, Losses int

	WinRate float32

	AverageKillsPerGame int

	AverageDeathsPerGame int

	AverageAssistsPerGame int

	AverageKillParticipationPerGame float32

	AverageCSPerGame int

	AverageCSPerMinutePerGame float32

	AverageDamageDealtPerGame int

	AverageDamageDealtPer10MinutesPerGame int

	// lp gain for matches that actually have lp deltas?
	LPGain int
}

templ (m ChampionModalRowLayout) build() {
	<div class="flex h-15 px-4 justify-evenly items-center">
		@m.ChampionWidget
		<div class="h-9">
			<div class="text-sm">
				{ fmt.Sprintf("%d-%d / %d", m.Wins, m.Losses, m.GamesPlayed) }
			</div>
			<div class="text-xs">
				{ fmt.Sprintf("%.0f%%", m.WinRate*100) }
			</div>
		</div>
		@KDAWidget{}
		@CSWidget{}
		@GoldWidget{}
	</div>
}

func (m ChampionModalRowLayout) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type ChampionModalLayout struct {
	List ChampionModalList
}

templ (m ChampionModalLayout) build() {
	<div>
		<h2>
			Champion stats in past week
		</h2>
		<div class="mt-3">
			@m.List
		</div>
	</div>
}

func (m ChampionModalLayout) Render(ctx context.Context, w io.Writer) error {
	window := ModalWindow{
		Children: m.build(),
	}

	return window.Render(ctx, w)
}
