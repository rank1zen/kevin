package frontend

import (
	"context"
	"io"

	"github.com/rank1zen/kevin/internal"
	"fmt"
	"time"
)

type Card struct {
	Children templ.Component
}

templ (m Card) build() {
	<div class="rounded-lg bg-white hover:bg-gray-50">
		@m.Children
	</div>
}

func (m Card) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// MatchHistoryCard displays a match in a summoner's match history.
type MatchHistoryCard struct {
	Champion               int
	Summoners              [2]int
	Kills, Deaths, Assists int
	CS                     int
	CSPerMinute            float32
	RunePage               internal.RunePage
	Items                  [7]int
	Rank                   *internal.RankDetail
	LPChange               *int
}

templ (m MatchHistoryCard) build() {
	<li class="flex flex-none items-center p-2 rounded-lg even:bg-gray-500/5 gap-4">
		<div class="flex-none">
			@ChampionWidget{
				Champion:  m.Champion,
				Summoners: &m.Summoners,
			}
		</div>
		<div class="flex justify-end flex-none w-24">
			@TextKDA{
				Kills:   m.Kills,
				Deaths:  m.Deaths,
				Assists: m.Assists,
			}
		</div>
		<div class="flex-none w-24">
			@TextCS{
				CS:          m.CS,
				CSPerMinute: m.CSPerMinute,
			}
		</div>
		@RuneWidget{
			RunePage: m.RunePage,
		}
		@ItemWidget{
			Items: m.Items,
		}
		<div class="flex flex-none gap-1">
			@RankWidget{Rank: m.Rank}
			<span class="text-sm text-green-500">
				+21
			</span>
		</div>
	</li>
}

func (m MatchHistoryCard) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// MatchHistoryBlockCard displays a full day of matches.
type MatchHistoryBlockCard struct {
	Date time.Time

	Matches []MatchHistoryCard
}

templ (m MatchHistoryBlockCard) build() {
	<ol class="rounded-lg">
		for _, match := range m.Matches {
			@match
		}
	</ol>
}

func (m MatchHistoryBlockCard) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type LiveMatchSummonerCard struct {
	Champion  int
	Summoners [2]int
	RunePage  internal.RunePage
	Name      string
	Tag       string
	Rank      *internal.RankDetail
	TeamID    int
}

templ (m LiveMatchSummonerCard) build() {
	<div class="flex items-center p-2 rounded-lg hover:bg-gray-900/5">
		@ChampionWidget{
			Champion:  m.Champion,
			Summoners: &m.Summoners,
		}
		@RuneWidget{
			RunePage: m.RunePage,
		}
		<div class="w-24">
			<span class="text-sm">{ m.Name }</span>
		</div>
		@RankWidget{
			Rank:        m.Rank,
			ShowWinLoss: true,
		}
	</div>
}

func (m LiveMatchSummonerCard) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type SummonerChampionCard struct {
	Champion               int
	Kills, Deaths, Assists int
	KillParticipation      float32
	CS int
	CSPerMinute    float32
	DamageDealt            int
	DamageTaken            int
	DamageDeltaEnemy       int
	DamagePercentageTeam   float32
	GoldEarned             int
	GoldDeltaEnemy         int
	GoldPercentageTeam     float32
	VisionScore            int
	PinkWardsBought        int
}

templ (m SummonerChampionCard) build() {
	<div class="flex items-center p-2 rounded-lg hover:bg-gray-900/5">
		@ChampionWidget{Champion: m.Champion}
		<div class="w-24">
			@TextKDA{
				Kills:   m.Kills,
				Deaths:  m.Deaths,
				Assists: m.Assists,
			}
		</div>
		<div class="w-24">
			@TextCS{
				CS:          m.CS,
				CSPerMinute: m.CSPerMinute,
			}
		</div>
		// more fields
		<div class="w-24">
			+21
		</div>
	</div>
}

func (m SummonerChampionCard) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type SearchResultCard struct {
	PUUID string

	Platform string

	Name, Tag string

	Rank *internal.RankDetail
}

templ (m SearchResultCard) build() {
	<a href={ templ.URL(fmt.Sprintf("/summoner/%s/%s/%s", m.Platform, m.Name, m.Tag)) } class="flex items-center justify-between p-1">
		<div class="flex flex-col gap-1">
			<div class="font-bold text-sm text-gray-900/90 truncate text-left">
				{ m.Name +"#"+ m.Tag }
			</div>
			@RankWidget{Rank: m.Rank, ShowTierName: true, Size: TextSizeXS}
		</div>
	</a>
}

func (m SearchResultCard) Render(ctx context.Context, w io.Writer) error {
	card := Card{
		Children: m.build(),
	}

	return card.Render(ctx, w)
}

// SearchNotFoundCard is a button that will issue a post to fetch summoner.
type SearchNotFoundCard struct {
	Name string

	// Tag is the tagline. If empty, Platform is used.
	Tag string

	Platform string
}

templ (m SearchNotFoundCard) build() {
	<button
		type="button"
		hx-post="/fetch/summoner"
		hx-trigger="click"
		class="flex w-full cursor-pointer items-center justify-between px-2 py-1 gap-3"
	>
		<div class="flex-1 min-w-0">
			<div class="text-sm text-gray-900/90 truncate text-left">
				{ m.Name + "#" + m.Tag } is not found
			</div>
			<div class="text-xs text-gray-500/90 truncate text-left">
				Click to fetch
			</div>
		</div>
		<div class="flex-none">
			@Icon(StaticViewRefreshSymbol)
		</div>

		<input type="hidden" name="platform" value={ m.Platform }/>
		<input type="hidden" name="name" value={ m.Name }/>
		if m.Tag != "" {
			<input type="hidden" name="tag" value={ m.Tag }/>
		} else {
			<input type="hidden" name="tag" value={ m.Platform }/>
		}
	</button>
}

func (m SearchNotFoundCard) Render(ctx context.Context, w io.Writer) error {
	card := Card{
		Children: m.build(),
	}
	return card.Render(ctx, w)
}
