package frontend

import (
	"context"
	"github.com/rank1zen/kevin/internal"
	"io"
)

type LiveMatchSummonerCard struct {
	Champion  int
	Summoners [2]int
	RunePage  internal.RunePage
	Name      string
	Tag       string
	Rank      *internal.RankDetail
	TeamID    int
}

templ (m LiveMatchSummonerCard) build() {
	<div class="flex items-center p-2 rounded-lg hover:bg-gray-900/5">
		@ChampionWidget{
			Champion:  m.Champion,
			Summoners: &m.Summoners,
		}
		@RuneWidget{
			RunePage: m.RunePage,
		}
		<div class="w-24">
			<span class="text-sm">{ m.Name }</span>
		</div>
		@RankWidget{
			Rank:        m.Rank,
			ShowWinLoss: true,
		}
	</div>
}

func (m LiveMatchSummonerCard) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type SummonerChampionCard struct {
	Champion               int
	Kills, Deaths, Assists float32
	KillParticipation      float32
	CS                     int
	CSPerMinute            float32
	DamageDealt            int
	DamageTaken            int
	DamageDeltaEnemy       int
	DamagePercentageTeam   float32
	GoldEarned             int
	GoldDeltaEnemy         int
	GoldPercentageTeam     float32
	VisionScore            int
	PinkWardsBought        int
}

templ (m SummonerChampionCard) build() {
	<div class="flex items-center p-2 rounded-lg hover:bg-gray-900/5">
		@ChampionWidget{Champion: m.Champion}
	</div>
}

func (m SummonerChampionCard) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type SearchCard struct {
	Children templ.Component
}

templ (m SearchCard) build() {
	<li class="rounded-lg bg-transparent hover:bg-gray-900/5 dark:hover:bg-gray-200/5 cursor-pointer">
		@m.Children
	</li>
}

func (m SearchCard) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// SearchNotFoundCard is a button that will issue a post to fetch summoner.
type SearchNotFoundCard struct {
	Name string

	// Tag is the tagline. If empty, Platform is used.
	Tag string

	Platform string
}

templ (m SearchNotFoundCard) build() {
	<button
		type="button"
		hx-post="/summoner/fetch"
		hx-trigger="click"
		hx-include="[name='region'], [name='name'], [name='tag']"
		class="flex w-full items-center justify-between px-3 py-2 gap-3"
	>
		<div class="flex-1 min-w-0">
			<div class="text-sm text-gray-900/90 dark:text-gray-200/90 text-left truncate">
				{ m.Name + "#" + m.Tag } is not found
			</div>
			<div class="text-xs text-gray-500/90 dark:text-gray-600/90 text-left truncate">
				Click to fetch
			</div>
		</div>
		<div class="flex-none">
			@staticIcon(StaticViewRefreshSymbol)
		</div>
		<input type="hidden" name="region" value={ m.Platform }/>
		<input type="hidden" name="name" value={ m.Name }/>
		if m.Tag != "" {
			<input type="hidden" name="tag" value={ m.Tag }/>
		} else {
			<input type="hidden" name="tag" value={ m.Platform }/>
		}
	</button>
}

func (m SearchNotFoundCard) Render(ctx context.Context, w io.Writer) error {
	card := SearchCard{
		Children: m.build(),
	}

	return card.Render(ctx, w)
}
