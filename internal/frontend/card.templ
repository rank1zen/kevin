package frontend

import (
	"context"
	"github.com/rank1zen/kevin/internal"
	"io"
	"time"
)

type Card struct {
	Children templ.Component
}

templ (m Card) build() {
	<li class="bg-white dark:bg-gray-950 hover:bg-gray-900/5 dark:hover:bg-gray-100/5 border-b border-gray-900/5 dark:border-gray-100/5 last:border-none">
		@m.Children
	</li>
}

func (m Card) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type CardGroup struct {
	Title string

	Cards []Card
}

templ (m CardGroup) build() {
	<div>
		<div class="mb-3">
			@h2(m.Title)
		</div>
		<ol class="bg-white dark:bg-gray-950 border border-gray-900/10 shadow shadow-gray-900/50 dark:shadow-gray-100/50 overflow-hidden rounded-2xl">
			for _, card := range m.Cards {
				@card
			}
		</ol>
	</div>
}

func (m CardGroup) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// MatchHistoryCard displays a match in a summoner's match history.
type MatchHistoryCard struct {
	MatchID                string
	Champion               int
	Summoners              [2]int
	Kills, Deaths, Assists int
	CS                     int
	CSPerMinute            float32
	RunePage               internal.RunePage
	Items                  [7]int
	Rank                   *internal.RankDetail
	LPChange               *int
}

templ (m MatchHistoryCard) build() {
	<div class="flex gap-4 px-4 py-3 items-center">
		@ChampionWidget{
			Champion:  m.Champion,
			Summoners: &m.Summoners,
		}
		@KDAWidget{
			Kills:   m.Kills,
			Deaths:  m.Deaths,
			Assists: m.Assists,
		}
		@CSWidget{
			CS:          m.CS,
			CSPerMinute: m.CSPerMinute,
		}
		@RuneWidget{
			RunePage: m.RunePage,
		}
		@ItemWidget{
			Items: m.Items,
		}
	</div>
}

func (m MatchHistoryCard) card() Card {
	card := Card{
		Children: m.build(),
	}

	return card
}

func (m MatchHistoryCard) Render(ctx context.Context, w io.Writer) error {
	card := Card{
		Children: m.build(),
	}

	return card.Render(ctx, w)
}

// MatchHistoryBlockCard displays a full day of matches.
type MatchHistoryBlockCard struct {
	Date time.Time

	Matches []MatchHistoryCard
}

templ (m MatchHistoryBlockCard) makeMatches() {
	<div>
		@h2(m.Date.Format("Monday"))
		<div class="flex h-24 items-center justify-center">
			<span>No matches played</span>
		</div>
	</div>
}

templ (m MatchHistoryBlockCard) build() {
	<div>
		<h2 class="font-bold">
			{ m.Date.Format("Monday") }
		</h2>
		<ol class="border-1 border-gray-900/15 shadow overflow-hidden rounded-2xl">
			for _, match := range m.Matches {
				@match
			}
		</ol>
	</div>
}

func (m MatchHistoryBlockCard) Render(ctx context.Context, w io.Writer) error {
	if len(m.Matches) == 0 {
		return m.makeMatches().Render(ctx, w)
	}

	cards := []Card{}

	for _, match := range m.Matches {
		cards = append(cards, match.card())
	}

	group := CardGroup{
		Title: m.Date.Format("Monday, Jan 2"),
		Cards: cards,
	}

	return group.Render(ctx, w)
}

type LiveMatchSummonerCard struct {
	Champion  int
	Summoners [2]int
	RunePage  internal.RunePage
	Name      string
	Tag       string
	Rank      *internal.RankDetail
	TeamID    int
}

templ (m LiveMatchSummonerCard) build() {
	<div class="flex items-center p-2 rounded-lg hover:bg-gray-900/5">
		@ChampionWidget{
			Champion:  m.Champion,
			Summoners: &m.Summoners,
		}
		@RuneWidget{
			RunePage: m.RunePage,
		}
		<div class="w-24">
			<span class="text-sm">{ m.Name }</span>
		</div>
		@RankWidget{
			Rank:        m.Rank,
			ShowWinLoss: true,
		}
	</div>
}

func (m LiveMatchSummonerCard) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type SummonerChampionCard struct {
	Champion               int
	Kills, Deaths, Assists int
	KillParticipation      float32
	CS                     int
	CSPerMinute            float32
	DamageDealt            int
	DamageTaken            int
	DamageDeltaEnemy       int
	DamagePercentageTeam   float32
	GoldEarned             int
	GoldDeltaEnemy         int
	GoldPercentageTeam     float32
	VisionScore            int
	PinkWardsBought        int
}

templ (m SummonerChampionCard) build() {
	<div class="flex items-center p-2 rounded-lg hover:bg-gray-900/5">
		@ChampionWidget{Champion: m.Champion}
	</div>
}

func (m SummonerChampionCard) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

type SearchCard struct {
	Children templ.Component
}

templ (m SearchCard) build() {
	<li class="rounded-lg bg-transparent hover:bg-gray-900/5 dark:hover:bg-gray-200/5 cursor-pointer">
		@m.Children
	</li>
}

func (m SearchCard) Render(ctx context.Context, w io.Writer) error {
	return m.build().Render(ctx, w)
}

// SearchNotFoundCard is a button that will issue a post to fetch summoner.
type SearchNotFoundCard struct {
	Name string

	// Tag is the tagline. If empty, Platform is used.
	Tag string

	Platform string
}

templ (m SearchNotFoundCard) build() {
	<button
		type="button"
		hx-post="/summoner/fetch"
		hx-trigger="click"
		hx-include="[name='region'], [name='name'], [name='tag']"
		class="flex w-full items-center justify-between px-3 py-2 gap-3"
	>
		<div class="flex-1 min-w-0">
			<div class="text-sm text-gray-900/90 dark:text-gray-200/90 text-left truncate">
				{ m.Name + "#" + m.Tag } is not found
			</div>
			<div class="text-xs text-gray-500/90 dark:text-gray-600/90 text-left truncate">
				Click to fetch
			</div>
		</div>
		<div class="flex-none">
			@staticIcon(StaticViewRefreshSymbol)
		</div>
		<input type="hidden" name="region" value={ m.Platform }/>
		<input type="hidden" name="name" value={ m.Name }/>
		if m.Tag != "" {
			<input type="hidden" name="tag" value={ m.Tag }/>
		} else {
			<input type="hidden" name="tag" value={ m.Platform }/>
		}
	</button>
}

func (m SearchNotFoundCard) Render(ctx context.Context, w io.Writer) error {
	card := SearchCard{
		Children: m.build(),
	}

	return card.Render(ctx, w)
}
