// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package component

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"context"
	"fmt"
)

type PopoverPosition int

const (
	PopoverPositionBottom PopoverPosition = iota
	PopoverPositionBottomStart
	PopoverPositionBottomEnd
	PopoverPositionTop
	PopoverPositionTopStart
	PopoverPositionTopEnd
	PopoverPositionLeft
	PopoverPositionLeftStart
	PopoverPositionLeftEnd
	PopoverPositionRight
	PopoverPositionRightStart
	PopoverPositionRightEnd
)

// Popover shows a popup on click.
type Popover struct {
	// ButtonChildren are placed inside the button that triggers the
	// popover. A nil value will default to [Button].
	ButtonChildren Component

	// PanelChildren are placed inside the popover panel. A nil value
	// will default to [PanelWindow].
	PanelChildren Component

	PanelPosition PopoverPosition

	// PanelOffset is offset in pixels.
	PanelOffset int
}

func (m Popover) ToTempl(ctx context.Context) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"relative\" x-id=\"\n\t\t\t['dropdown-wrapper']\n\t\t\" x-data=\"{\n\t\t\topen: false,\n\t\t        toggle() {\n\t\t\t\tif (this.open) {\n\t\t\t\t    return this.close()\n\t\t\t\t}\n\t\t\t\tthis.$refs.button.focus()\n\t\t\t\tthis.open = true\n\t\t\t},\n\t\t\tclose(focusAfter) {\n\t\t\t\tif (! this.open) return\n\t\t\t\tthis.open = false\n\t\t\t\tfocusAfter && focusAfter.focus()\n\t\t\t}\n\t\t}\" @focusin.window=\"! $refs.panel.contains($event.target) && close()\"><button type=\"button\" x-ref=\"button\" @click=\"toggle()\" class=\"relative cursor-pointer rounded-lg transition hover:bg-gray-900/5 dark:hover:bg-gray-100/5 active:bg-gray-900/10 dark:active:bg-gray-100/10\" :class=\"open && 'bg-gray-900/5 dark:bg-gray-100/5'\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if m.ButtonChildren != nil {
			templ_7745c5c3_Err = m.ButtonChildren.ToTempl(ctx).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = Button{}.ToTempl(ctx).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</button><div x-cloak x-ref=\"panel\" x-show=\"open\" @click.outside=\"close($refs.button)\" class=\"z-10\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, generateXAnchorAttrKey(m.PanelPosition, m.PanelOffset))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, ">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if m.PanelChildren != nil {
			templ_7745c5c3_Err = m.PanelChildren.ToTempl(ctx).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = PanelWindow{}.ToTempl(ctx).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func generateXAnchorAttrKey(position PopoverPosition, offset int) templ.Attributes {
	var pp string
	switch position {
	case PopoverPositionBottom:
		pp = "bottom"
	case PopoverPositionBottomEnd:
		pp = "bottom-end"
	case PopoverPositionBottomStart:
		pp = "bottom-start"
	case PopoverPositionTop:
		pp = "top"
	case PopoverPositionTopEnd:
		pp = "top-end"
	case PopoverPositionTopStart:
		pp = "top-start"
	case PopoverPositionLeft:
		pp = "left"
	case PopoverPositionLeftEnd:
		pp = "left-end"
	case PopoverPositionLeftStart:
		pp = "left-start"
	case PopoverPositionRight:
		pp = "right"
	case PopoverPositionRightEnd:
		pp = "right-end"
	case PopoverPositionRightStart:
		pp = "right-start"
	}

	return templ.Attributes{
		fmt.Sprintf("x-anchor.%s.offset.%d", pp, offset): "$refs.button",
	}
}

var _ = templruntime.GeneratedTemplate
