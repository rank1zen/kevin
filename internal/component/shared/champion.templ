package shared

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal/component"
)

// ChampionWidget displays a champion icon and summoner spells.
type ChampionWidget struct {
	ChampionSprite component.Sprite

	// ChampionLevel is the level of the champion at the end of a match.
	// Zero values indicate that level is not included in the component.
	ChampionLevel int

	// SummonerD and SummonerF are summoner spells. Nil values indicate
	// that summoner spells is not be included in the component.
	SummonerD, SummonerF *component.Sprite
}

func NewMatchChampionWidget(championID int, championLevel int, summonerIDs [2]int) ChampionWidget {
	c := ChampionWidget{
		ChampionSprite: NewChampionSprite(championID, component.TextSize2XL),
		ChampionLevel:  championLevel,
	}

	c.SummonerD = new(component.Sprite)
	*c.SummonerD = NewSummonerSpellSprite(summonerIDs[0], component.TextSizeXS)

	c.SummonerF = new(component.Sprite)
	*c.SummonerF = NewSummonerSpellSprite(summonerIDs[1], component.TextSizeXS)

	return c
}

func NewLiveChampionWidget(championID int, summonerIDs [2]int) ChampionWidget {
	c := ChampionWidget{
		ChampionSprite: NewChampionSprite(championID, component.TextSize2XL),
	}

	c.SummonerD = new(component.Sprite)
	*c.SummonerD = NewSummonerSpellSprite(summonerIDs[0], component.TextSizeXS)

	c.SummonerF = new(component.Sprite)
	*c.SummonerF = NewSummonerSpellSprite(summonerIDs[1], component.TextSizeXS)

	return c
}

func NewSimpleChampionWidget(championID int) ChampionWidget {
	c := ChampionWidget{
		ChampionSprite: NewChampionSprite(championID, component.TextSize2XL),
	}

	return c
}

templ (m ChampionWidget) ToTempl(ctx context.Context) {
	if m.SummonerD != nil && m.SummonerF != nil {
		<div class="flex flex-none gap-x-0.5 items-center">
			if m.ChampionLevel == 0 {
				<div class="size-9">
					@m.ChampionSprite.ToTempl(ctx)
				</div>
			} else {
				<div class="size-9 relative">
					@m.ChampionSprite.ToTempl(ctx)
					<div class="right-0 bottom-0 size-4 text-xs absolute text-white text-center font-medium">
						{ fmt.Sprintf("%d", m.ChampionLevel) }
					</div>
				</div>
			}
			<div class="flex flex-col gap-y-0.5">
				<div class="rounded-xs overflow-hidden">
					@m.SummonerD.ToTempl(ctx)
				</div>
				<div class="rounded-xs overflow-hidden">
					@m.SummonerF.ToTempl(ctx)
				</div>
			</div>
		</div>
	} else {
		if m.ChampionLevel == 0 {
			<div class="size-9">
				@m.ChampionSprite.ToTempl(ctx)
			</div>
		} else {
			<div class="size-9 relative">
				@m.ChampionSprite.ToTempl(ctx)
				<div class="right-0 bottom-0 size-4 text-xs absolute text-white text-center font-medium">
					{ fmt.Sprintf("%d", m.ChampionLevel) }
				</div>
			</div>
		}
	}
}
