package shared

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal"
	"github.com/rank1zen/kevin/internal/riot"
	"github.com/rank1zen/kevin/internal/component"
)

// RankWidget displays summoner rank.
type RankWidget struct {
	// Rank is the summoner's rank at an instance. A nil value indicates
	// summoner is unranked.
	Rank *internal.Rank

	ShowTierName bool

	// Size is the height of the widget, following [TextSize]. [TextSizeXS]
	// and [TextSizeSM] are supported.
	Size component.TextSize
}

func NewRankWidget(rank *internal.Rank) RankWidget {
	w := RankWidget{
		Rank: rank,
		ShowTierName: true,
		Size: component.TextSizeSM,
	}

	return w
}

templ (m RankWidget) ToTempl(ctx context.Context) {
	if m.Size == component.TextSizeXS {
		<div class={ generateTierBGColorClass(m.Rank), "flex flex-none px-1 rounded h-4 items-center gap-x-1" }>
			<span class="text-xs text-white">
				{ generateRankLabel(m.Rank, m.ShowTierName) }
			</span>
		</div>
	} else {
		<div class={ generateTierBGColorClass(m.Rank), "flex flex-none px-1 rounded h-5 items-center gap-x-1" }>
			<span class="text-sm text-white">
				{ generateRankLabel(m.Rank, m.ShowTierName) }
			</span>
		</div>
	}
}

// RankDeltaWidget shows a rank change after a match.
type RankDeltaWidget struct {
	// RankWidget is the rank after the match. A nil value means the store
	// did not record a rank after the match.
	RankChange *RankWidget

	// LPChange is the lp change after the match. A nil value indicates the
	// lp change is unknown.
	LPChange *int

	Win bool
}

func NewRankDeltaWidget(before, after *internal.Rank, win bool) RankDeltaWidget {
	c := RankDeltaWidget{}

	c.Win = win

	if after != nil {
		c.RankChange = &RankWidget{
			Rank: after,
		}

		if before != nil {
			c.LPChange = new(int)
			*c.LPChange = (after.LP) - (before.LP)
		}
	}

	return c
}

templ (m RankDeltaWidget) ToTempl(ctx context.Context) {
	<div class="h-9">
		<div clas="flex justify-end">
			if m.RankChange != nil {
				@m.RankChange.ToTempl(ctx)
			} else {
				<div class="text-sm font-semibold text-gray-900/90 dark:text-gray-100/90">
					Unknown
				</div>
			}
		</div>
		if m.Win {
			<div class="flex justify-end">
				<div class="text-xs bg-green-500/80 text-white px-1 rounded">
					if m.LPChange != nil {
						{ fmt.Sprintf("WIN %+d", m.LPChange) }
					} else {
						{ fmt.Sprintf("WIN +??") }
					}
				</div>
			</div>
		} else {
			<div class="flex justify-end">
				<div class="text-xs bg-red-500/80 text-white px-1 rounded">
					if m.LPChange != nil {
						{ fmt.Sprintf("LOSS %+d", m.LPChange) }
					} else {
						{ fmt.Sprintf("LOSS +??") }
					}
				</div>
			</div>
		}
	</div>
}

// generateRankLabel generates, for example, "Gold IV 71 LP" if showName is
// true, else "71 LP".
func generateRankLabel(rank *internal.Rank, showName bool) string {
	if !showName {
		if rank == nil {
			return ""
		}

		return fmt.Sprintf("%d LP", rank.LP)
	}

	if rank == nil {
		return "Unranked"
	}

	label := fmt.Sprintf("%s %s %d LP", rank.Tier.String(), rank.Division.String(), rank.LP)
	if rank.Tier == riot.TierChallenger || rank.Tier == riot.TierGrandmaster || rank.Tier == riot.TierMaster {
		label = fmt.Sprintf("%s %d LP", rank.Tier.String(), rank.LP)
	}

	return label
}

var tierBGColor = map[riot.Tier]string{
	riot.TierIron:        "bg-stone-500/50",
	riot.TierBronze:      "bg-yellow-700/50",
	riot.TierSilver:      "bg-slate-400/50",
	riot.TierGold:        "bg-yellow-500/50",
	riot.TierPlatinum:    "bg-cyan-400/50",
	riot.TierEmerald:     "bg-green-600/50",
	riot.TierDiamond:     "bg-violet-500/50",
	riot.TierMaster:      "bg-violet-500/50",
	riot.TierGrandmaster: "bg-red-600/50",
	riot.TierChallenger:  "bg-amber-500/50",
}

// generateTierTextColorClass generates a TW bg color class.
func generateTierBGColorClass(rank *internal.Rank) string {
	if rank == nil {
		return "bg-gray-600/50"
	}

	return tierBGColor[rank.Tier]
}
