package shared

import (
	"context"
	"github.com/rank1zen/kevin/internal/component"
	"github.com/rank1zen/kevin/internal/riot"
)

// DefaultPageHeader is the default header for all pages.
//
// TODO: rename to NewPageHeader.
func DefaultPageHeader() component.Header {
	return component.Header{
		StartChildren: []component.Component{
			component.Link{
				Href:     "/",
				Children: component.Button{Icon: component.OpenMenuIcon},
			},
		},
		CenterChildren: []component.Component{
			component.Popover{
				ButtonChildren: component.ComponentFunc(regionButton),
				PanelChildren:  component.PanelWindow{Children: component.ComponentFunc(regionPanel)},
				PanelOffset:    8,
			},
			NewSummonerSearchBar(),
		},
		EndChildren: []component.Component{
			NewGithubLink(),
			NewDarkModeButton(),
		},
	}
}

func NewLoadingHeader() component.Header {
	c := component.Header{}

	c.EndChildren = []component.Component{
		component.ModalExitButton{},
	}

	return c
}

templ regionButton(ctx context.Context) {
	<div class="flex flex-none h-9 w-20 px-2 items-center gap-2 justify-end">
		<span class="text-sm font-bold text-gray-900/90 dark:text-gray-100/90">
			NA1
		</span>
		@component.DownSmallIcon.ToTempl(ctx)
	</div>
}

templ regionPanel(ctx context.Context) {
	<div class="p-2">
		@component.MenuItemLayout{Label: "NA1", SubLabel: "North America"}.ToTempl(ctx)
		@component.MenuItemLayout{Label: "KR", SubLabel: "Korea"}.ToTempl(ctx)
	</div>
}

type RegionPickerButton struct {
	Region riot.Region
}

func RegionPanel() component.PanelWindow {
	list := component.List{Items: []component.Component{}}
	for _, region := range []riot.Region{
		riot.RegionBR1,
		riot.RegionEUW1,
		riot.RegionKR,
		riot.RegionNA1,
	} {
		list.Items = append(list.Items, component.MenuItemLayout{Label: regionToString(region), SubLabel: regionName(region)})
	}

	c := component.PanelWindow{
		Children: component.ComponentFunc(regionPanel),
	}

	return c
}

func regionName(region riot.Region) string {
	names := map[riot.Region]string{
		riot.RegionNA1: "North America",
	}

	return names[region]
}

func regionToString(region riot.Region) string {
	return string(region)
}

func NewExtraMenu() component.Popover {
	list := component.List{Items: []component.Component{}}

	list.Items = append(list.Items, component.Link{
		Href:     "https://github.com/rank1zen/kevin",
		Children: component.MenuItemLayout{Label: "Github"},
	})

	panel := component.Panel{Children: list}

	popover := component.Popover{
		ButtonChildren: component.Button{Icon: component.OpenMenuIcon},
		PanelChildren:  panel,
		PanelOffset:    8,
	}

	return popover
}

func NewDarkModeButton() component.Component {
	return component.ComponentFunc(newDarkModeButton)
}

func NewGithubLink() component.Component {
	link := component.Link{
		Href:     "https://github.com/rank1zen/kevin",
		Children: component.Button{Icon: GithubIcon},
	}

	return link
}

templ newDarkModeButton(ctx context.Context) {
	<button
		type="button"

		@click="darkMode = !darkMode"

		class="size-9 p-2.5 rounded-lg transition cursor-pointer dark:hover:bg-gray-100/5 hover:bg-gray-900/5 focus-visible:inset-ring-blue-500/50 focus-visible:inset-ring-2 focus-visible:outline-0"
	>
		@DarkModeIcon.ToTempl(ctx)
	</button>
}

templ newGithubLink(ctx context.Context) {
	<a
		href="https://github.com/rank1zen/kevin"
		class="size-9 p-2.5 rounded-lg transition cursor-pointer dark:hover:bg-gray-100/5 hover:bg-gray-900/5 focus-visible:inset-ring-blue-500/50 focus-visible:inset-ring-2 focus-visible:outline-0"
	>
		@GithubIcon.ToTempl(ctx)
	</a>
}
