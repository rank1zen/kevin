// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package shared

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"context"
	"github.com/rank1zen/kevin/internal/component"
	"github.com/rank1zen/kevin/internal/riot"
)

// DefaultPageHeader is the default header for all pages.
//
// TODO: rename to NewPageHeader.
func DefaultPageHeader() component.Header {
	return component.Header{
		StartChildren: []component.Component{
			component.Link{
				Href:     "/",
				Children: component.Button{Icon: component.OpenMenuIcon},
			},
		},
		CenterChildren: []component.Component{
			component.Popover{
				ButtonChildren: component.ComponentFunc(regionButton),
				PanelChildren:  component.PanelWindow{Children: component.ComponentFunc(regionPanel)},
				PanelOffset:    8,
			},
			NewSummonerSearchBar(),
		},
		EndChildren: []component.Component{
			NewExtraMenu(),
		},
	}
}

func NewLoadingHeader() component.Header {
	c := component.Header{}

	c.EndChildren = []component.Component{
		component.ModalExitButton{},
	}

	return c
}

func regionButton(ctx context.Context) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"flex flex-none h-9 w-20 px-2 items-center gap-2 justify-end\"><span class=\"text-sm font-bold\">NA1</span>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = component.DownSmallIcon.ToTempl(ctx).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func regionPanel(ctx context.Context) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"p-2\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = component.MenuItemLayout{Label: "NA1", SubLabel: "North America"}.ToTempl(ctx).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = component.MenuItemLayout{Label: "KR", SubLabel: "Korea"}.ToTempl(ctx).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

type RegionPickerButton struct {
	Region riot.Region
}

func RegionPanel() component.PanelWindow {
	list := component.List{Items: []component.Component{}}
	for _, region := range []riot.Region{
		riot.RegionBR1,
		riot.RegionEUW1,
		riot.RegionKR,
		riot.RegionNA1,
	} {
		list.Items = append(list.Items, component.MenuItemLayout{Label: regionToString(region), SubLabel: regionName(region)})
	}

	c := component.PanelWindow{
		Children: component.ComponentFunc(regionPanel),
	}

	return c
}

func regionName(region riot.Region) string {
	names := map[riot.Region]string{
		riot.RegionNA1: "North America",
	}

	return names[region]
}

func regionToString(region riot.Region) string {
	return string(region)
}

func NewExtraMenu() component.Popover {
	list := component.List{Items: []component.Component{}}

	list.Items = append(list.Items, component.Link{
		Href:     "https://github.com/rank1zen/kevin",
		Children: component.MenuItemLayout{Label: "Github"},
	})

	panel := component.Panel{Children: list}

	popover := component.Popover{
		ButtonChildren: component.Button{Icon: component.OpenMenuIcon},
		PanelChildren:  panel,
		PanelOffset:    8,
	}

	return popover
}

var _ = templruntime.GeneratedTemplate
