package component

import "context"

type TabContainer struct {
	Children Component
}

templ (m TabContainer) ToTempl(ctx context.Context) {
	<div
		x-id="['tab']"
		x-data="{
			selectedID: null,
			init() {
				this.$nextTick(() => this.select(this.$id('tab', 1)))
			},
			select(id) {
				this.selectedID = id
			},
			isSelected(id) {
				return this.selectedID === id
			},
			whichChild(el, parent) {
				return Array.from(parent.children).indexOf(el) + 1
			}
		}"
		class=""
	>
		if m.Children != nil {
			@m.Children.ToTempl(ctx)
		}
	</div>
}

type TabList struct {
	Tabs []TabTrigger
}

templ (m TabList) ToTempl(ctx context.Context) {
	<ul
		x-ref="tabList"
		role="tablist"
		class="flex gap-x-1 items-center"
	>
		for _, tab := range m.Tabs {
			<li>
				@tab.ToTempl(ctx)
			</li>
		}
	</ul>
}

type TabTrigger struct {
	Label string

	Icon Icon
}

templ (m TabTrigger) ToTempl(ctx context.Context) {
	<button
		:id="$id('tab', whichChild($el.parentElement, $refs.tabList))"
		type="button"
		role="tab"
		@click="select($el.id)"
		class="h-9 w-36 transition rounded-lg cursor-pointer inline-flex items-center justify-center dark:hover:bg-gray-100/5 dark:active:bg-gray-100/10 hover:bg-gray-900/5 focus-visible:inset-ring-blue-500/50 focus-visible:inset-ring-2 focus-visible:outline-0 active:bg-gray-900/10"
		:class="isSelected($el.id) && 'bg-gray-900/5 dark:hover:bg-gray-100/5'"
	>
		if m.Icon != nil {
			@m.Icon.ToTempl(ctx)
		}
		if m.Label != "" {
			<span class="whitespace-nowrap font-bold text-sm text-gray-900/90 dark:text-gray-100/90">
				{ m.Label }
			</span>
		}
	</button>
}

type TabPanelList struct {
	PanelList []TabPanel
}

templ (m TabPanelList) ToTempl(ctx context.Context) {
	<div
		x-ref="tabPanelList"
		role="tabpanels"
		class=""
	>
		for _, panel := range m.PanelList {
			@panel.ToTempl(ctx)
		}
	</div>
}

type TabPanel struct {
	Children Component
}

templ (m TabPanel) ToTempl(ctx context.Context) {
	<div
		role="tabpanel"
		x-show="isSelected($id('tab', whichChild($el, $el.parentElement)))"
		if m.Children != nil {
			class=""
		} else {
			class="bg-white h-36"
		}
	>
		if m.Children != nil {
			@m.Children.ToTempl(ctx)
		}
	</div>
}
