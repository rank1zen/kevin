package component

import "context"

type TabContainer struct {
	Children Component
}

/*
{
	selectedId: null,
	init() { this.$nextTick(() => this.select(this.$id('fdsdafdafdafdsda', 1))) },
	select(id) { this.selectedId = id },
	isSelected(id) { return this.selectedId === id },
	whichChild(el, parent) { return Array.from(parent.children).indexOf(el) + 1 }
}
*/

templ (m TabContainer) ToTempl(ctx context.Context) {
	<div
		x-id="['tab']"
		x-data="{
			selectedID: null,
			init() {
				this.$nextTick(() => this.select(this.$id('tab', 1)))
			},
			select(id) {
				this.selectedID = id
			},
			isSelected(id) {
				return this.selectedID === id
			},
			whichChild(el, parent) {
				return Array.from(parent.children).indexOf(el) + 1
			}
		}"
		class=""
	>
		if m.Children != nil {
			@m.Children.ToTempl(ctx)
		}
	</div>
}

type TabList struct {
	Tabs []TabTrigger
}

/*
   <ul x-bind="zxnjvumrjl" role="tablist" class="-mb-px flex items-stretch overflow-x-auto">
       <li>
           <button x-bind="qlzoqbzppb" type="button" :class="isSelected($el.id) ? 'border-gray-200 bg-white' : 'border-transparent'" class="inline-flex rounded-t-lg border-t border-l border-r px-5 py-2.5 border-gray-200 bg-white" role="tab" id="fdsdafdafdafdsda-1-1" tabindex="0" aria-selected="true">Tab 1</button>
       </li>
       <li>
           <button x-bind="qlzoqbzppb" type="button" :class="isSelected($el.id) ? 'border-gray-200 bg-white' : 'border-transparent'" class="inline-flex rounded-t-lg border-t border-l border-r px-5 py-2.5 border-transparent" role="tab" id="fdsdafdafdafdsda-1-2" tabindex="-1" aria-selected="false">Tab 2</button>
       </li>
   </ul>
*/

templ (m TabList) ToTempl(ctx context.Context) {
	<ul
		x-ref="tabList"
		role="tablist"
		class="flex gap-x-1 items-center"
	>
		for _, tab := range m.Tabs {
			<li>
				@tab.ToTempl(ctx)
			</li>
		}
	</ul>
}

type TabTrigger struct {
	Label string

	Icon Icon
}

/*
{
	['x-ref']: 'tablist',
	['@keydown.right.prevent.stop']() { this.$focus.wrap().next() },
	['@keydown.home.prevent.stop']() { this.$focus.first() },
	['@keydown.page-up.prevent.stop']() { this.$focus.first() },
	['@keydown.left.prevent.stop']() { this.$focus.wrap().prev() },
	['@keydown.end.prevent.stop']() { this.$focus.last() },
	['@keydown.page-down.prevent.stop']() { this.$focus.last() }
}
*/

/*{
	[':id']() { return this.$id('fdsdafdafdafdsda', this.whichChild(this.$el.parentElement, this.$refs.tablist)) },
	['@click']() { this.select(this.$el.id) },
	['@focus']() { this.select(this.$el.id) },
	[':tabindex']() { return this.isSelected(this.$el.id) ? 0 : -1 },
	[':aria-selected']() { return this.isSelected(this.$el.id) },
	[':class']() { return this.isSelected(this.$el.id) ? 'border-black bg-white' : 'border-transparent' }
}*/

templ (m TabTrigger) ToTempl(ctx context.Context) {
	<button
		:id="$id('tab', whichChild($el.parentElement, $refs.tabList))"
		type="button"
		role="tab"
		@click="select($el.id)"
		class="h-9 w-36 transition rounded-lg cursor-pointer dark:hover:bg-gray-100/5 hover:bg-gray-900/5 inline-flex items-center justify-center dark:active:bg-gray-100/10 focus-visible:inset-ring-blue-500/50 focus-visible:inset-ring-2 focus-visible:outline-0 active:bg-gray-900/10"
		:class="isSelected($el.id) && 'bg-gray-900/5 dark:hover:bg-gray-100/5'"
	>
		if m.Icon != nil {
			@m.Icon.ToTempl(ctx)
		}
		if m.Label != "" {
			<span class="whitespace-nowrap font-bold text-sm text-gray-900/90 dark:text-gray-100/90">
				{ m.Label }
			</span>
		}
	</button>
}

type TabPanelList struct {
	PanelList []TabPanel
}

templ (m TabPanelList) ToTempl(ctx context.Context) {
	<div
		x-ref="tabPanelList"
		role="tabpanels"
		class=""
	>
		for _, panel := range m.PanelList {
			@panel.ToTempl(ctx)
		}
	</div>
}

type TabPanel struct {
	Children Component
}

templ (m TabPanel) ToTempl(ctx context.Context) {
	<div
		role="tabpanel"
		x-show="isSelected($id('tab', whichChild($el, $el.parentElement)))"
		if m.Children != nil {
			class=""
		} else {
			class="bg-white h-36"
		}
	>
		if m.Children != nil {
			@m.Children.ToTempl(ctx)
		}
	</div>
}
