package live

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal"
	"github.com/rank1zen/kevin/internal/component"
	"github.com/rank1zen/kevin/internal/component/shared"
	"github.com/rank1zen/kevin/internal/ddragon"
	"path"
	"time"
)

type MatchWidget struct {
	StartTimestamp time.Time

	AverageRank shared.RankTag
}

templ (m MatchWidget) ToTempl(ctx context.Context) {
	<div class="h-9">
		<div class="">
			{ m.StartTimestamp.Format("Jan 2, 3:04PM") }
		</div>
		@m.AverageRank.ToTempl(ctx)
	</div>
}

func staticImage(p string) string {
	return path.Join("/static/", p)
}

type RuneWidget internal.RunePage

templ (m RuneWidget) ToTempl(ctx context.Context) {
	<div class="flex flex-none h-9 bg-gray-900/5 rounded-lg dark:bg-gray-100/5">
		{{ tree := ddragon.RuneMap[m.PrimaryKeystone] }}
		{{ treePath := staticImage(tree.IconPath) }}
		<img class="rounded-lg size-9 dark:hover:bg-gray-100/5 hover:bg-gray-900/5" src={ treePath }/>
		<div class="rounded-lg h-9 w-6 flex items-center justify-center dark:hover:bg-gray-100/5 hover:bg-gray-900/5">
			{{ second := ddragon.RuneMap[m.SecondaryTree] }}
			{{ secondPath := staticImage(second.IconPath) }}
			<img class="size-4" src={ secondPath }/>
		</div>
	</div>
}

type ChampionWidget struct {
	ChampionID  int
	SummonerIDs [2]int
}

templ (m ChampionWidget) ToTempl(ctx context.Context) {
	<div class="flex flex-none gap-x-0.5 items-center">
		<div class="size-9">
			@shared.NewChampionSprite(m.ChampionID, component.TextSize2XL).ToTempl(ctx)
		</div>
		<div class="flex flex-col gap-y-0.5">
			@shared.NewSummonerSpellSprite(m.SummonerIDs[0], component.TextSizeXS).ToTempl(ctx)
			@shared.NewSummonerSpellSprite(m.SummonerIDs[1], component.TextSizeXS).ToTempl(ctx)
		</div>
	</div>
}

// Participant displays a participant in a live match.
type Participant struct {
	ChampionWidget ChampionWidget
	RuneWidget     RuneWidget
	Participant    ParticipantWidget
}

templ (m Participant) ToTempl(ctx context.Context) {
	<div class="flex h-15 gap-x-4 px-4 justify-between items-center">
		<div class="flex gap-x-2">
			@m.ChampionWidget.ToTempl(ctx)
			@m.Participant.ToTempl(ctx)
		</div>
		<div class="flex gap-x-2">
			@m.RuneWidget.ToTempl(ctx)
		</div>
	</div>
}

type ParticipantList []Participant

templ (m ParticipantList) ToTempl(ctx context.Context) {
	<div class="rounded-2xl bg-white border border-gray-900/10 shadow-sm shadow-gray-900/10 dark:bg-black dark:border-gray-100/10 dark:shadow-gray-100/10">
		for _, c := range m {
			<div class="border-t border-gray-900/10 dark:border-gray-100/10 first:border-0">
				@c.ToTempl(ctx)
			</div>
		}
	</div>
}

type ParticipantWidget struct {
	Name, Tag string

	Rank shared.RankTag
}

templ (m ParticipantWidget) ToTempl(ctx context.Context) {
	<div class="flex flex-col h-9">
		<div class="text-sm text-semibold text-gray-900/90 whitespace-nowrap dark:text-gray-100/90">
			{ fmt.Sprintf("%s#%s", m.Name, m.Tag) }
		</div>
		@m.Rank.ToTempl(ctx)
	</div>
}
