package component

import (
	"context"
)

// Drawer triggers a drawer panel on click.
type Drawer struct {
	// ButtonChildren are placed inside the button that triggers the modal.
	// A nil value will default to [Button].
	ButtonChildren Component

	// PanelChildren are placed on the right side, in a floating layer.
	// A nil value indicates no children.
	PanelChildren Component
}

templ (m Drawer) ToTempl(ctx context.Context) {
	<div
		x-id="['modal-wrapper']"
		class="relative"
	>
		<button
			type="button"
			x-ref="button"
			@click="isModalOpen = true"
			class="relative cursor-pointer rounded-lg transition hover:bg-gray-900/5 dark:hover:bg-gray-100/5 active:bg-gray-900/20 dark:active:bg-gray-100/20"
			:class="isModalOpen && 'bg-gray-900/5 dark:bg-gray-100/5'"
		>
			if m.ButtonChildren != nil {
				@m.ButtonChildren.ToTempl(ctx)
			} else {
				@Button{}.ToTempl(ctx)
			}
		</button>
		<div
			x-cloak
			x-ref="panel"
			x-show="isModalOpen"
			x-transition.opacity
			class="fixed inset-0 flex items-end z-30 bg-gray-900/20"
		>
			<div class="bg-white dark:bg-black shadow max-w-300 md:rounded-l-2xl h-screen overflow-y-auto">
				if m.PanelChildren != nil {
					@m.PanelChildren.ToTempl(ctx)
				}
			</div>
		</div>
	</div>
}
