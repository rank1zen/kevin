package component

import "context"

// Modal triggers a modal panel on click.
type Modal struct {
	// ButtonChildren are placed inside the button that triggers the modal.
	// A nil value will default to [ButtonLayout].
	ButtonChildren Component

	// PanelChildren are placed centrally, in a floating layer. A nil value
	// indicates no children.
	PanelChildren Component
}

templ (m Modal) ToTempl(ctx context.Context) {
	<div
		x-id="['modal-button']"
		x-data="{ open: false }"
		@keydown.escape.window="open = false"
		class="relative"
	>
		<button
			type="button"
			x-ref="trigger"
			@click="open = true"
			class="relative cursor-pointer rounded-lg transition dark:hover:bg-gray-100/5 dark:active:bg-gray-100/20 hover:bg-gray-900/5 focus-visible:inset-ring-blue-500/50 focus-visible:inset-ring-2 focus-visible:outline-0 active:bg-gray-900/20"
			:class="open && 'bg-gray-900/5 dark:bg-gray-100/5'"
		>
			if m.ButtonChildren != nil {
				@m.ButtonChildren.ToTempl(ctx)
			} else {
				@Button{}.ToTempl(ctx)
			}
		</button>
		<template x-if="true">
			// TODO: aria labelled by
			<div
				role="dialog"
				x-ref="panel"
				x-show="open"
				x-trap.inert.noscroll="open"
				aria-modal="true"
				@click.stop
				:id="$id('modal-button')"
				x-transition.opacity
				class="fixed inset-0 flex items-end justify-center z-30 bg-gray-900/20 md:items-center"
			>
				<div
					x-show="open"
					x-transition
					class="bg-gray-50 border border-gray-900/10 shadow-lg shadow-gray-900/10 w-full rounded-t-2xl h-3/5 md:w-2xl md:rounded-2xl dark:bg-gray-950 dark:border-gray-100/10 dark:shadow-gray-100/10"
				>
					if m.PanelChildren != nil {
						@m.PanelChildren.ToTempl(ctx)
					}
				</div>
			</div>
		</template>
	</div>
}

type LazyModal struct {
	Icon Icon

	Label string

	Path string

	Data string
}

templ (m LazyModal) ToTempl(ctx context.Context) {
	<div
		x-id="['modal']"
		x-data="{ open: false }"
		@keydown.escape.window="open = false"
		class="relative"
	>
		<button
			type="button"
			x-ref="trigger"
			@click="open = true"
			class="relative w-full flex items-center justify-center gap-x-2 h-9 cursor-pointer rounded-lg transition dark:hover:bg-gray-100/5 dark:active:bg-gray-100/10 hover:bg-gray-900/5 focus-visible:inset-ring-blue-500/50 focus-visible:inset-ring-2 focus-visible:outline-0 active:bg-gray-900/10"
			:class="open && 'bg-gray-900/5 dark:bg-gray-100/5'"
		>
			<span class="text-sm font-bold text-gray-900/90 dark:text-gray-100/90">
				{ m.Label }
			</span>
		</button>
		<template x-if="true">
			<div
				role="dialog"
				x-ref="panel"
				x-show="open"
				x-trap.inert.noscroll="open"
				aria-modal="true"
				@click.stop
				:id="$id('modal')"
				x-transition.opacity
				class="fixed inset-0 flex items-end justify-center z-100 bg-gray-900/20 md:items-center"
			>
				<div
					hx-post={ m.Path }
					hx-trigger="click"
					hx-ext="json-enc"
					if m.Data != "" {
						hx-vals={ string(m.Data) }
					}
					x-show="open"
					x-transition
					class="bg-gray-50 border border-gray-900/10 shadow-lg shadow-gray-900/10 w-full rounded-t-2xl h-3/5 overflow-y-auto md:w-2xl md:rounded-2xl dark:bg-gray-950 dark:border-gray-100/10 dark:shadow-gray-100/10"
				>
					<div class="flex sticky top-0 z-10 bg-gray-50 items-center px-2 h-13 justify-end dark:bg-gray-950">
						@ModalExitButton{}.ToTempl(ctx)
					</div>
					<div class="flex justify-center items-center">
						@Spinner{}.ToTempl(ctx)
					</div>
				</div>
			</div>
		</template>
	</div>
}

templ modalPanel() {
	<template x-if="true">
		// TODO: aria labelled by
		<div
			role="dialog"
			x-ref="panel"
			x-show="open"
			x-trap.inert.noscroll="open"
			aria-modal="true"
			@click.stop
			:id="$id('modal-button')"
			x-transition.opacity
			class="fixed inset-0 flex items-end justify-center z-100 bg-gray-900/20 md:items-center"
		>
			{ children... }
		</div>
	</template>
}

// ModalExitButton can be used in a [Modal] component to close the window.
type ModalExitButton struct{}

templ (m ModalExitButton) ToTempl(ctx context.Context) {
	<div class="flex size-9 items-center justify-center">
		<button
			type="button"
			x-ref="exit"
			@click="open = false"
			class="cursor-pointer size-7 rounded-full flex items-center justify-center bg-gray-900/5 dark:bg-gray-100/5"
		>
			@WindowCloseIcon.ToTempl(ctx)
		</button>
	</div>
}

// ModalLayout is the layout used for modal windows.
type ModalLayout struct {
	// HeaderChildren are placed in the header. A nil value indicates no
	// header.
	HeaderChildren Component

	// Children are placed in the main body. A nil value indicates an empty
	// page.
	Children Component
}

templ (m ModalLayout) ToTempl(ctx context.Context) {
	if m.HeaderChildren != nil {
		<div class="flex flex-col h-full">
			<div class="w-full sticky top-0 z-10 bg-gray-50 rounded-t-2xl dark:bg-gray-950">
				@m.HeaderChildren.ToTempl(ctx)
			</div>
			if m.Children != nil {
				<div class="flex-1 w-full overflow-auto">
					@m.Children.ToTempl(ctx)
				</div>
			}
		</div>
	} else {
		if m.Children != nil {
			<div class="h-full overflow-auto">
				@m.Children.ToTempl(ctx)
			</div>
		}
	}
}
