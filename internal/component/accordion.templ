package component

import (
	"context"
)

type Accordion struct {
	Children Component

	ExtraChildren Component
}

templ (m Accordion) ToTempl(ctx context.Context) {
	<div
		x-id="['accordion']"
		x-data="{ open: false }"
	>
		<div class="bg-white border border-gray-900/10 rounded-2xl dark:bg-black dark:border-gray-100/10">
			if m.Children != nil {
				@m.Children.ToTempl(ctx)
			}
		</div>
		<div
			class="bg-gray-50 border border-gray-900/10 rounded-2xl mt-2 shadow-xs shadow-gray-900/10 dark:bg-gray-950 dark:border-gray-100/10 dark:shadow-gray-100/10"
			x-show="open"
		>
			if m.ExtraChildren != nil {
				@m.ExtraChildren.ToTempl(ctx)
			}
		</div>
	</div>
}

type LazyAccordion struct {
	Children Component

	Path string

	Data string

	LoadingChildren Component
}

templ (m LazyAccordion) ToTempl(ctx context.Context) {
	<div
		x-id="['accordion']"
		x-data="{ open: false }"
	>
		<div
			class="bg-white border border-gray-900/10 rounded-2xl dark:bg-black dark:border-gray-100/10"
		>
			if m.Children != nil {
				@m.Children.ToTempl(ctx)
			}
		</div>
		<div
			hx-post={ m.Path }
			hx-trigger="visible once from:previous"
			hx-ext="json-enc"
			if m.Data != "" {
				hx-vals={ string(m.Data) }
			}
			x-show="open"
			class="bg-gray-50 border border-gray-900/10 rounded-2xl mt-2 shadow-xs shadow-gray-900/10 dark:bg-gray-950 dark:border-gray-100/10 dark:shadow-gray-100/10"
		>
			if m.LoadingChildren != nil {
				@m.LoadingChildren.ToTempl(ctx)
			}
		</div>
	</div>
}

type AccordionList []Component

templ (m AccordionList) ToTempl(ctx context.Context) {
	<div>
		for _, c := range m {
			<div class="mb-2 last:mb-0">
				@c.ToTempl(ctx)
			</div>
		}
	</div>
}

// NOTE: this could be a variable instead of a type definition.
type AccordionTrigger struct{}

templ (m AccordionTrigger) ToTempl(ctx context.Context) {
	<button
		type="button"
		@click="
			open = !open;
			$dispatch('visible');
		"
		class="flex items-center justify-center size-9 rounded-lg transition cursor-pointer dark:hover:bg-gray-100/5 dark:active:bg-gray-100/10 hover:bg-gray-900/5 focus-visible:inset-ring-blue-500/50 focus-visible:inset-ring-2 focus-visible:outline-0 active:bg-gray-900/10"
		:class="open && 'bg-gray-900/5 dark:bg-gray-900/5'"
	>
		@DownLargeIcon()
	</button>
}
