package component

import "context"

// Page is the main html component returned the to browser.
type Page struct {
	// TODO: ... empty value means no title.
	Title string

	// HeaderChildren is the content to show in header.
	HeaderChildren Component

	// Content is a body component of the page. A nil value indicates an
	// empty page.
	Content Component
}

templ (m Page) ToTempl(ctx context.Context) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
			<script src="https://unpkg.com/htmx.org@2.0.0" integrity="sha384-wS5l5IKJBvK6sPTKa2WZ1js3d947pvWXbPJ1OmWfEuxLgeHcEbjUUA5i9V5ZkpCw" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/htmx-ext-json-enc@2.0.1/json-enc.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/anchor@3.x.x/dist/cdn.min.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/focus@3.x.x/dist/cdn.min.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			if m.Title != "" {
				<title>
					{ m.Title }
				</title>
			}
		</head>
		<body
			x-data="{
				isModalOpen: false
			}"
			@keydown.escape="isModalOpen = false"
			:class="isModalOpen && 'overflow-hidden'"
		>
			if m.HeaderChildren != nil {
				<div class="sticky top-0 z-10 bg-white dark:bg-gray-950">
					@m.HeaderChildren.ToTempl(ctx)
				</div>
			}
			<div class="bg-white min-h-screen dark:bg-gray-950">
				if m.Content != nil {
					@m.Content.ToTempl(ctx)
				}
			</div>
			<div class="flex items-center justify-center">
				<div>
					Some example footer content
				</div>
			</div>
		</body>
	</html>
}
