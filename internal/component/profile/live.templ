package profile

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal/component"
	"github.com/rank1zen/kevin/internal/component/shared"
	"time"
	"github.com/rank1zen/kevin/internal"
)

func NewLiveMatch(avgRank internal.Rank, match internal.LiveMatch) component.ModalLayout {
	c := component.ModalLayout{}

	c.HeaderChildren = LiveMatchHeader{
		AverageRank: shared.RankWidget{Rank: &avgRank},
		StartTime:   match.Date,
	}

	content := LiveMatchContent{
		BlueSide: component.List{Items: []component.Component{}},
		RedSide:  component.List{Items: []component.Component{}},
	}

	for _, p := range match.GetTeamParticipants(100) {
		content.BlueSide.Items = append(content.BlueSide.Items, newLiveParticipantCard(p))
	}

	for _, p := range match.GetTeamParticipants(200) {
		content.RedSide.Items = append(content.RedSide.Items, newLiveParticipantCard(p))
	}

	c.Children = content

	return c
}

func NewLiveMatchNotFound() component.ModalLayout {
	c := component.ModalLayout{}

	return c
}

// LiveParticipantCard displays a participant in a live match.
type LiveParticipantCard struct {
	ChampionWidget shared.Champion

	RuneWidget shared.RuneWidget

	Name, Tag string

	Rank shared.RankWidget
}

templ (m LiveParticipantCard) ToTempl(ctx context.Context) {
	<div class="flex h-15 gap-x-4 px-4 justify-between items-center">
		<div class="flex gap-x-4">
			@m.ChampionWidget.ToTempl(ctx)
			<div class="flex-1 min-w-0 h-9">
				<div class="text-sm text-semibold text-gray-900/90 dark:text-gray-100/90 whitespace-nowrap">
					{ m.Name + "#" + m.Tag }
				</div>
				@m.Rank.ToTempl(ctx)
			</div>
			@m.RuneWidget.ToTempl(ctx)
		</div>
		<div class="flex gap-x-4">
			@m.RuneWidget.ToTempl(ctx)
		</div>
	</div>
}

// LiveMatchHeader is a layout for details on a live match.
type LiveMatchHeader struct {
	AverageRank shared.RankWidget

	StartTime time.Time
}

templ (m LiveMatchHeader) ToTempl(ctx context.Context) {
	<div class="flex items-center justify-between gap-2">
		<div class="flex">
			{ fmt.Sprintf("%v", m.StartTime) }
		</div>
		<div class="flex">
			@m.AverageRank.ToTempl(ctx)
		</div>
	</div>
}

// LiveMatchContent is a layout for details on a live match.
type LiveMatchContent struct {
	BlueSide, RedSide component.List
}

templ (m LiveMatchContent) ToTempl(ctx context.Context) {
	<div class="px-2">
		<div class="">
			<h2 class="font-bold text-base text-gray-900/90 dark:text-gray-100/90 mt-9">
				Blue Side
			</h2>
			<div class="mt-3">
				@m.BlueSide.ToTempl(ctx)
			</div>
			<h2 class="font-bold text-base text-gray-900/90 dark:text-gray-100/90 mt-9">
				Red Side
			</h2>
			<div class="mt-3">
				@m.RedSide.ToTempl(ctx)
			</div>
		</div>
	</div>
}

// FIXME: very bare
type LiveMatchNotFound struct{}

templ (m LiveMatchNotFound) ToTempl(ctx context.Context) {
	<div class="px-2">
		Live match is not found
	</div>
}

// LiveMatchLoader requests the server for [LiveMatchContent].
// Uses [LoaderTypeOnReveal].
type LiveMatchLoader struct{}

templ (m LiveMatchLoader) ToTempl(ctx context.Context) {
	// TODO: implement
}

func newLiveParticipantCard(p internal.LiveParticipant) LiveParticipantCard {
	c := LiveParticipantCard{
		ChampionWidget: shared.NewLiveChampionWidget(p.ChampionID, p.SummonersIDs),
		RuneWidget: shared.NewRuneWidget(p.Runes),
		Name: "XXX",
		Tag: "XXX",
		Rank: shared.NewRankWidget(nil),
	}

	return c
}
