package profile

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal/component"
	"github.com/rank1zen/kevin/internal/component/shared"
	"github.com/rank1zen/kevin/internal"
	"time"
)

func NewLiveMatchHeader(avgRank internal.Rank, match internal.LiveMatch) component.Header {
	header := component.Header{}

	header.StartChildren = []component.Component{
		NewLiveMatchWidget(avgRank, match.Date),
	}

	header.CenterChildren = []component.Component{}

	header.EndChildren = []component.Component{
		component.ModalExitButton{},
	}

	return header
}

func NewLiveMatch(avgRank internal.Rank, match internal.LiveMatch) component.ModalLayout {
	c := component.ModalLayout{}

	c.HeaderChildren = NewLiveMatchHeader(avgRank, match)

	content := LiveMatchContent{
		BlueSide: component.List{Items: []component.Component{}},
		RedSide:  component.List{Items: []component.Component{}},
	}

	for _, p := range match.GetTeamParticipants(100) {
		content.BlueSide.Items = append(content.BlueSide.Items, NewLiveParticipantCard(p))
	}

	for _, p := range match.GetTeamParticipants(200) {
		content.RedSide.Items = append(content.RedSide.Items, NewLiveParticipantCard(p))
	}

	c.Children = content

	return c
}

func NewLiveMatchNotFound() component.ModalLayout {
	c := component.ModalLayout{}

	c.HeaderChildren = component.Header{
		StartChildren:  []component.Component{},
		CenterChildren: []component.Component{},
		EndChildren:    []component.Component{component.ModalExitButton{}},
	}

	c.Children = component.ComponentFunc(liveMatchNotFoundContent)

	return c
}

type LiveMatchWidget struct {
	StartTimestamp time.Time

	AverageRank shared.RankWidget
}

func NewLiveMatchWidget(avgRank internal.Rank, startTS time.Time) LiveMatchWidget {
	widget := LiveMatchWidget{
		StartTimestamp: startTS,
		AverageRank: shared.RankWidget{Rank: &avgRank, Size: component.TextSizeXS},
	}

	return widget
}

templ (m LiveMatchWidget) ToTempl(ctx context.Context) {
	<div class="h-9">
		<div>
			{ m.StartTimestamp.Format("Jan 2, 3:04PM") }
		</div>
		@m.AverageRank.ToTempl(ctx)
	</div>
}

type ParticipantWidget struct {
	Name, Tag string

	// TODO: add docs
	Rank *shared.RankWidget
}

templ (m ParticipantWidget) ToTempl(ctx context.Context) {
	<div class="flex flex-col h-9">
		<div class="text-sm text-semibold text-gray-900/90 dark:text-gray-100/90 whitespace-nowrap">
			{ fmt.Sprintf("%s#%s", m.Name, m.Tag) }
		</div>
		if m.Rank != nil {
			@m.Rank.ToTempl(ctx)
		}
	</div>
}

// LiveParticipantCard displays a participant in a live match.
type LiveParticipantCard struct {
	ChampionWidget shared.Champion

	RuneWidget shared.RuneWidget

	Participant ParticipantWidget
}

func NewLiveParticipantCard(p internal.LiveParticipant) LiveParticipantCard {
	c := LiveParticipantCard{
		ChampionWidget: shared.NewLiveChampionWidget(p.ChampionID, p.SummonersIDs),
		RuneWidget:     shared.NewRuneWidget(p.Runes),
		Participant:    ParticipantWidget{Name: "XXX", Tag: "XXX"},
	}

	return c
}

templ (m LiveParticipantCard) ToTempl(ctx context.Context) {
	<div class="flex h-15 gap-x-4 px-4 justify-between items-center">
		<div class="flex gap-x-4">
			@m.ChampionWidget.ToTempl(ctx)
			@m.Participant.ToTempl(ctx)
		</div>
		<div class="flex gap-x-4">
			@m.RuneWidget.ToTempl(ctx)
		</div>
	</div>
}

// LiveMatchContent is a layout for details on a live match.
type LiveMatchContent struct {
	BlueSide, RedSide component.List
}

templ (m LiveMatchContent) ToTempl(ctx context.Context) {
	<div class="px-2">
		<div class="">
			<h2 class="font-bold text-base text-gray-900/90 dark:text-gray-100/90 mt-9">
				Blue Side
			</h2>
			<div class="mt-3">
				@m.BlueSide.ToTempl(ctx)
			</div>
			<h2 class="font-bold text-base text-gray-900/90 dark:text-gray-100/90 mt-9">
				Red Side
			</h2>
			<div class="mt-3">
				@m.RedSide.ToTempl(ctx)
			</div>
		</div>
	</div>
}

templ liveMatchNotFoundContent(ctx context.Context) {
	<div class="w-full flex-1 flex items-center justify-center">
		<span class="font-semibold text-base text-gray-900/90 dark:text-gray-100/90">
			Summoner not in game
		</span>
	</div>
}
