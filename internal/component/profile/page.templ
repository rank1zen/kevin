package profile

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/rank1zen/kevin/internal"
	"github.com/rank1zen/kevin/internal/component"
	"github.com/rank1zen/kevin/internal/component/shared"
	"github.com/rank1zen/kevin/internal/riot"
	"time"
)

// CreatePage creates a profile page.
func CreatePage(region riot.Region, summoner internal.Summoner, rank *internal.Rank) component.Page {
	matches := []MatchHistory{}

	for i := range 7 {
		data := struct {
			Region riot.Region `json:"region"`

			PUUID riot.PUUID `json:"puuid"`

			// Date should be the start of the day. The request will fetch all
			// matches played on the day.
			Date time.Time `json:"date"`
		}{
			Region: region,
			PUUID:  summoner.PUUID,
			Date:   GetDay(i),
		}

		j, _ := json.Marshal(data)

		matches = append(matches, MatchHistory{
			Date:    GetDay(i),
			Request: string(j),
		})
	}

	page := component.Page{
		Title:          fmt.Sprintf("%s#%s - Kevin", summoner.Name, summoner.Tagline),
		HeaderChildren: shared.DefaultPageHeader(),
		Content: PageBody{
			TitleBar: PageTitleBar{
				Name: summoner.Name,
				Tag:  summoner.Tagline,
				Champions: component.Modal{
					ButtonChildren: component.Button{Icon: component.OpenMenuIcon},
					PanelChildren:  component.Loader{},
				},
				LiveMatch: component.Modal{
					ButtonChildren: component.Button{Icon: component.OpenMenuIcon},
					PanelChildren:  component.Loader{},
				},
			},
			Matches: matches,
		},
	}

	return page
}

// PageBody is data for a profile page.
type PageBody struct {
	TitleBar PageTitleBar

	Matches []MatchHistory
}

templ (m PageBody) ToTempl(ctx context.Context) {
	<div class="px-2">
		@m.TitleBar.ToTempl(ctx)
		<div class="flex flex-col gap-9 max-w-5xl mx-auto md:flex-row md:flex-wrap">
			<div class="flex flex-col h-100 gap-y-5 md:order-last md:w-3xs bg-black"></div>
			<div class="flex flex-col flex-1 gap-y-5">
				for _, c := range m.Matches {
					@c.ToTempl(ctx)
				}
			</div>
		</div>
	</div>
}

type PageTitleBar struct {
	Name, Tag string

	Rank shared.RankWidget

	Champions, LiveMatch component.Modal
}

templ (m PageTitleBar) ToTempl(ctx context.Context) {
	<div class="flex h-13 max-w-5xl mx-auto items-center gap-x-2 justify-between">
		<div class="flex items-center gap-x-2">
			<h1 class="font-bold text-2xl text-gray-900/90 dark:text-gray-100/90">
				{ fmt.Sprintf("%s#%s", m.Name, m.Tag) }
			</h1>
			@m.Rank.ToTempl(ctx)
		</div>
		<div class="flex items-center gap-x-2">
			@m.Champions.ToTempl(ctx)
			@m.LiveMatch.ToTempl(ctx)
		</div>
	</div>
}
