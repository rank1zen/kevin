package profile

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal"
	"github.com/rank1zen/kevin/internal/component"
	"github.com/rank1zen/kevin/internal/component/shared"
	"github.com/rank1zen/kevin/internal/riot"
)

// NewPage creates a profile page.
func NewPage(ep EndpointProvider, region riot.Region, summoner internal.ProfileDetail) component.Page {
	page := component.Page{
		Title:          fmt.Sprintf("%s#%s - Kevin", summoner.Name, summoner.Tagline),
		HeaderChildren: shared.DefaultPageHeader(),
		Children:       NewPageBody(ep, region, summoner),
		FooterChildren: shared.NewPageFooter(),
	}

	return page
}

// PageBody is data for a profile page.
type PageBody struct {
	TitleBar PageTitleBar

	Matches []component.Section
}

func NewPageBody(ep EndpointProvider, region riot.Region, summoner internal.ProfileDetail) PageBody {
	body := PageBody{
		TitleBar: NewPageTitleBar(ep, region, summoner),
		Matches:  []component.Section{},
	}

	for i := range 7 {
		path, data := ep.GetMatchHistory(region, summoner.PUUID, i)

		body.Matches = append(body.Matches, component.Section{
			Heading: GetDay(i).Format("Monday, Jan 2"),
			Content: NewMatchHistoryLoader(path, string(data)),
		})
	}

	return body
}

templ (m PageBody) ToTempl(ctx context.Context) {
	<div class="px-2">
		@m.TitleBar.ToTempl(ctx)
		<div class="flex flex-col gap-9 max-w-5xl mx-auto">
			<div class="flex flex-col flex-1 gap-y-5">
				for _, c := range m.Matches {
					@c.ToTempl(ctx)
				}
			</div>
		</div>
	</div>
}

type PageTitleBar struct {
	Name, Tag string

	Rank shared.RankWidget

	Champions, LiveMatch component.Modal
}

func NewPageTitleBar(ep EndpointProvider, region riot.Region, summoner internal.ProfileDetail) PageTitleBar {
	livePath, liveData := ep.GetLiveMatch(region, summoner.PUUID)
	champPath, champData := ep.GetChampionList(region, summoner.PUUID)

	bar := PageTitleBar{
		Name: summoner.Name,
		Tag:  summoner.Tagline,
		Rank: shared.RankWidget{
			Rank:         nil,
			ShowTierName: true,
		},
		Champions: component.Modal{
			ButtonChildren: component.Button{
				Icon: component.ViewListIcon,
			},
			PanelChildren:  component.Loader{
				Path:     champPath,
				Data:     string(champData),
				Children: shared.NewLoadingModal(),
			},
		},
		LiveMatch: component.Modal{
			ButtonChildren: component.Button{
				Icon: component.OpenMenuIcon,
			},
			PanelChildren:  component.Loader{
				Path:     livePath,
				Data:     string(liveData),
				Children: shared.NewLoadingModal(),
			},
		},
	}

	if summoner.Rank.Detail != nil {
		bar.Rank.Rank = &summoner.Rank.Detail.Rank
	}

	return bar
}

templ (m PageTitleBar) ToTempl(ctx context.Context) {
	<div class="flex h-13 max-w-5xl mx-auto items-center gap-x-2 justify-between">
		<div class="flex items-center gap-x-2">
			<h1 class="font-bold text-2xl text-gray-900/90 dark:text-gray-100/90">
				{ fmt.Sprintf("%s#%s", m.Name, m.Tag) }
			</h1>
			@m.Rank.ToTempl(ctx)
		</div>
		<div class="flex items-center gap-x-2">
			@m.Champions.ToTempl(ctx)
			@m.LiveMatch.ToTempl(ctx)
		</div>
	</div>
}
