package profile

import (
	"context"
	"github.com/rank1zen/kevin/internal/component"
	"github.com/rank1zen/kevin/internal/component/shared"
	"github.com/rank1zen/kevin/internal"
)

func NewMatchHistoryList(matches []internal.SummonerMatch) component.List {
	c := component.List{Style: component.ListStyleRaised, Items: []component.Component{}}

	for _, m := range matches {
		card := MatchHistoryCard{
			ChampionWidget: shared.NewMatchChampionWidget(m.ChampionID, m.ChampionLevel, m.SummonerIDs),
			KDAWidget:      shared.NewKDAWidget(m.Kills, m.Deaths, m.Assists),
			CSWidget:       shared.NewCSWidget(m.CreepScore, m.CreepScorePerMinute),
			RuneWidget:     shared.NewRuneWidget(m.Runes),
			ItemWidget:     shared.NewItemInventory(m.Items, m.VisionScore),
			RankChange:     shared.NewRankDeltaWidget(nil, nil, m.Win),
		}

		c.Items = append(c.Items, card)
	}

	return c
}

func NewMatchHistoryNoMatches() component.List {
	c := component.List{Style: component.ListStyleRaised, Items: []component.Component{}}


	c.Items = append(c.Items, component.ComponentFunc(jlkjksdfjksfjk))

	return c
}

templ jlkjksdfjksfjk(ctx context.Context) {
	<div class="flex justify-center items-center w-full h-15">
		<span class="font-medium text-gray-900/90 dark:text-gray-100/90 text-sm">
			No matches played
		</span>
	</div>
}

func NewMatchDetail(match internal.Match) component.ModalLayout {
	blueSide, redSide := []component.Component{}, []component.Component{}

	for i, m := range match.Participants {
		row := MatchParticipantCard{
			Name:            "XXXX",
			Tag:             "XXXX",
			ChampionWidget: shared.NewMatchChampionWidget(m.ChampionID, m.ChampionLevel, m.SummonerIDs),
			KDAWidget:      shared.NewKDAWidget(m.Kills, m.Deaths, m.Assists),
			CSWidget:       shared.NewCSWidget(m.CreepScore, m.CreepScorePerMinute),
			RuneWidget:     shared.NewRuneWidget(m.Runes),
			Items:          shared.NewItemInventory(m.Items, m.VisionScore),
			RankDeltaWidget:shared.NewRankDeltaWidget(nil, nil, false),
		}

		if m.TeamID == 100 {
			blueSide[i%5] = row
		} else {
			redSide[i%5] = row
		}
	}

	content := NewMatchScoreboardView(match)

	layout := component.ModalLayout{
		HeaderChildren: nil,
		Children:       content,
	}

	return layout
}

// TODO: rename to MatchXXXX something else
func NewMatchDetailLoader(path string, data string) component.Loader {
	loader := component.Loader{
		Path:     path,
		Data:     data,
		Children: shared.NewLoadingModal(),
	}

	return loader
}

// NewMatchHistoryLoader creates a loading component for match history.
func NewMatchHistoryLoader(path string, data string) component.Loader {
	list := component.List{
		Style: component.ListStyleRaised,
		Items: []component.Component{},
	}

	loader := component.Loader{
		Path:     path,
		Data:     data,
		Children: list,
	}

	list.Items = append(list.Items, component.ComponentFunc(mhc))

	return loader
}

templ mhc(ctx context.Context) {
	<div class="px-4 h-15 flex justify-center items-center">
		@component.Spinner{}.ToTempl(ctx)
	</div>
}

// MatchHistoryCard displays a match in a summoner's match history.
type MatchHistoryCard struct {
	ChampionWidget shared.Champion

	KDAWidget shared.KDAWidget

	CSWidget shared.CSWidget

	RuneWidget shared.RuneWidget

	ItemWidget shared.ItemInventory

	RankChange shared.RankDeltaWidget
}

templ (m MatchHistoryCard) ToTempl(ctx context.Context) {
	<div class="px-4 py-3 gap-y-1 gap-x-2 flex flex-wrap justify-between md:flex-nowrap">
		<div class="flex gap-x-3">
			@m.ChampionWidget.ToTempl(ctx)
			@m.KDAWidget.ToTempl(ctx)
			@m.CSWidget.ToTempl(ctx)
		</div>
		<div class="flex gap-x-2 md:order-last">
			@m.RankChange.ToTempl(ctx)
		</div>
		<div class="flex gap-x-2 w-full justify-between md:w-auto">
			@m.RuneWidget.ToTempl(ctx)
			@m.ItemWidget.ToTempl(ctx)
		</div>
	</div>
}

type MatchParticipantCard struct {
	Name, Tag string

	ChampionWidget shared.Champion

	KDAWidget shared.KDAWidget

	CSWidget shared.CSWidget

	RuneWidget shared.RuneWidget

	Items shared.ItemInventory

	RankDeltaWidget shared.RankDeltaWidget
}

func NewMatchParticipantCard(name, tag string, p internal.Participant) MatchParticipantCard {
	card := MatchParticipantCard{
		Name:           name,
		Tag:            tag,
		ChampionWidget: shared.NewMatchChampionWidget(p.ChampionID, p.ChampionLevel, p.SummonerIDs),
		KDAWidget:      shared.NewKDAWidget(p.Kills, p.Deaths, p.Assists),
		CSWidget:       shared.NewCSWidget(p.CreepScore, p.CreepScorePerMinute),
		RuneWidget:     shared.NewRuneWidget(p.Runes),
		Items:          shared.NewItemInventory(p.Items, p.VisionScore),
		RankDeltaWidget:shared.NewRankDeltaWidget(nil, nil, false),
	}

	return card
}

templ (m MatchParticipantCard) ToTempl(ctx context.Context) {
	<div class="flex h-15 gap-x-4 px-4 justify-between items-center">
		<div class="flex gap-x-4">
			@m.ChampionWidget.ToTempl(ctx)
			<div class="flex-1 min-w-0 h-9">
				<div class="text-sm text-semibold text-gray-900/90 dark:text-gray-100/90 whitespace-nowrap">
					{ m.Name + "#" + m.Tag }
				</div>
			</div>
			@m.KDAWidget.ToTempl(ctx)
			@m.CSWidget.ToTempl(ctx)
		</div>
		<div class="flex gap-x-2 md:order-last">
			@m.RankDeltaWidget.ToTempl(ctx)
		</div>
		<div class="flex gap-x-4 w-full justify-between md:w-auto">
			@m.RuneWidget.ToTempl(ctx)
			@m.Items.ToTempl(ctx)
		</div>
	</div>
}

type MatchScoreboardView struct {
	BlueSide, RedSide component.Section
}

func NewMatchScoreboardView(match internal.Match) MatchScoreboardView {
	blue := component.List{Style: component.ListStyleRaised, Items: []component.Component{}}

	for _, p := range match.GetTeamParticipants(100) {
		blue.Items = append(blue.Items, NewMatchParticipantCard("XXX", "XXX", p))
	}

	red := component.List{Style: component.ListStyleRaised, Items: []component.Component{}}

	for _, p := range match.GetTeamParticipants(200) {
		red.Items = append(red.Items, NewMatchParticipantCard("XXX", "XXX", p))
	}

	content := MatchScoreboardView{
		BlueSide: component.Section{
			Heading: "Blue Side",
			Content: blue,
		},
		RedSide: component.Section{
			Heading: "Red Side",
			Content: red,
		},
	}

	return content
}

templ (m MatchScoreboardView) ToTempl(ctx context.Context) {
	<div class="px-2 py-5">
		<div>
			@m.BlueSide.ToTempl(ctx)
		</div>
		<div class="mt-10">
			@m.RedSide.ToTempl(ctx)
		</div>
	</div>
}
