package component

import (
	"context"
	"fmt"
)

type PopoverPosition int

const (
	PopoverPositionBottom PopoverPosition = iota
	PopoverPositionBottomStart
	PopoverPositionBottomEnd
	PopoverPositionTop
	PopoverPositionTopStart
	PopoverPositionTopEnd
	PopoverPositionLeft
	PopoverPositionLeftStart
	PopoverPositionLeftEnd
	PopoverPositionRight
	PopoverPositionRightStart
	PopoverPositionRightEnd
)

// Popover shows a popup on click.
type Popover struct {
	// ButtonChildren are placed inside the button that triggers the
	// popover. A nil value will default to [Button].
	ButtonChildren Component

	// PanelChildren are placed inside the popover panel. A nil value
	// will default to [PanelWindow].
	PanelChildren Component

	PanelPosition PopoverPosition

	// PanelOffset is offset in pixels.
	PanelOffset int
}

templ (m Popover) ToTempl(ctx context.Context) {
	<div
		class="relative"
		x-id="
			['dropdown-wrapper']
		"
		x-data="{
			open: false,
		        toggle() {
				if (this.open) {
				    return this.close()
				}
				this.$refs.button.focus()
				this.open = true
			},
			close(focusAfter) {
				if (! this.open) return
				this.open = false
				focusAfter && focusAfter.focus()
			}
		}"
		@focusin.window="! $refs.panel.contains($event.target) && close()"
	>
		<button
			type="button"
			x-ref="button"
			@click="toggle()"
			class="relative cursor-pointer rounded-lg transition hover:bg-gray-900/5 dark:hover:bg-gray-100/5 active:bg-gray-900/10 dark:active:bg-gray-100/10"
			:class="open && 'bg-gray-900/5 dark:bg-gray-100/5'"
		>
			if m.ButtonChildren != nil {
				@m.ButtonChildren.ToTempl(ctx)
			} else {
				@Button{}.ToTempl(ctx)
			}
		</button>
		<div
			x-cloak
			x-ref="panel"
			x-show="open"
			@click.outside="close($refs.button)"
			class="z-10"
			{ generateXAnchorAttrKey(m.PanelPosition, m.PanelOffset)... }
		>
			if m.PanelChildren != nil {
				@m.PanelChildren.ToTempl(ctx)
			} else {
				@PanelWindow{}.ToTempl(ctx)
			}
		</div>
	</div>
}

func generateXAnchorAttrKey(position PopoverPosition, offset int) templ.Attributes {
	var pp string
	switch position {
	case PopoverPositionBottom:
		pp = "bottom"
	case PopoverPositionBottomEnd:
		pp = "bottom-end"
	case PopoverPositionBottomStart:
		pp = "bottom-start"
	case PopoverPositionTop:
		pp = "top"
	case PopoverPositionTopEnd:
		pp = "top-end"
	case PopoverPositionTopStart:
		pp = "top-start"
	case PopoverPositionLeft:
		pp = "left"
	case PopoverPositionLeftEnd:
		pp = "left-end"
	case PopoverPositionLeftStart:
		pp = "left-start"
	case PopoverPositionRight:
		pp = "right"
	case PopoverPositionRightEnd:
		pp = "right-end"
	case PopoverPositionRightStart:
		pp = "right-start"
	}

	return templ.Attributes{
		fmt.Sprintf("x-anchor.%s.offset.%d", pp, offset): "$refs.button",
	}
}
