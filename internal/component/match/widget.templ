package match

import (
	"context"
	"fmt"
	"github.com/rank1zen/kevin/internal"
	"github.com/rank1zen/kevin/internal/component"
	"github.com/rank1zen/kevin/internal/component/shared"
	"github.com/rank1zen/kevin/internal/ddragon"
	"path"
)

type ChampionWidget struct {
	ChampionID    int
	ChampionLevel int
	SummonerIDs   [2]int
}

templ (m ChampionWidget) ToTempl(ctx context.Context) {
	<div class="flex flex-none gap-x-0.5 items-center">
		<div class="relative">
			{{ champion := shared.NewChampionSprite(m.ChampionID, component.TextSize2XL) }}
			@champion.ToTempl(ctx)
			<span class="right-0 bottom-0 size-4 text-xs absolute text-white text-center font-medium">
				{ fmt.Sprintf("%d", m.ChampionLevel) }
			</span>
		</div>
		<div class="flex flex-col gap-y-0.5">
			for _, id := range m.SummonerIDs {
				{{ spell := shared.NewSummonerSpellSprite(id, component.TextSizeXS) }}
				@spell.ToTempl(ctx)
			}
		</div>
	</div>
}

type RuneWidget internal.RunePage

templ (m RuneWidget) ToTempl(ctx context.Context) {
	<div class="flex flex-none bg-gray-50 rounded-lg dark:bg-neutral-900">
		<div class="transition size-9 rounded-lg dark:hover:bg-neutral-100/20 hover:bg-gray-900/5">
			{{ keystonePath := path.Join("/static/", ddragon.RuneMap[m.PrimaryKeystone].IconPath) }}
			<img class="size-9" src={ keystonePath }/>
		</div>
		<div class="transition h-9 w-6 flex items-center justify-center rounded-lg dark:hover:bg-neutral-100/20 hover:bg-gray-900/5">
			{{ secondaryTree := path.Join("/static/", ddragon.RuneMap[m.SecondaryTree].IconPath) }}
			<img class="size-4" src={ secondaryTree }/>
		</div>
		<div class="transition h-9 w-6 rounded-lg dark:hover:bg-neutral-100/20 hover:bg-gray-900/5"></div>
	</div>
}

type ItemWidget struct {
	Items       [7]int
	VisionScore int
}

templ (m ItemWidget) ToTempl(ctx context.Context) {
	<div class="flex flex-none h-9 items-center pl-1 gap-x-1 bg-gray-50 rounded-lg dark:bg-neutral-900">
		for i := range 6 {
			if id := m.Items[i]; id != 0 {
				{{ item := shared.NewItemSprite(id, component.TextSizeLG) }}
				@item.ToTempl(ctx)
			} else {
				<div class="size-7 rounded bg-gray-100 dark:bg-neutral-800"></div>
			}
		}
		<div class="relative">
			{{ ward := shared.NewItemSprite(m.Items[6], component.TextSizeLG) }}
			@ward.ToTempl(ctx)
			<span class="text-xs text-white font-medium left-1/2 -translate-x-1/2 bottom-0 absolute">
				{ fmt.Sprintf("%d", m.VisionScore) }
			</span>
		</div>
		<div class="transition h-9 w-6 rounded-lg dark:hover:bg-neutral-100/20 hover:bg-gray-900/5"></div>
	</div>
}

type KDAWidget struct {
	Kills, Deaths, Assists int
	KilLDeathRatio         float32
}

templ (m KDAWidget) ToTempl(ctx context.Context) {
	<div class="h-9 w-18">
		<div class="flex flex-none items-center font-semibold text-sm">
			<div class="flex-1 text-gray-900/90 text-left dark:text-gray-100/90">
				{ fmt.Sprintf("%d", m.Kills) }
			</div>
			<div class="text-gray-900/5 mx-1 dark:text-gray-100/5">
				/
			</div>
			<div class="flex-1 text-red-500/90 text-center">
				{ fmt.Sprintf("%d", m.Deaths) }
			</div>
			<div class="text-gray-900/5 mx-1 dark:text-gray-100/5">
				/
			</div>
			<div class="flex-1 text-gray-900/90 text-right dark:text-gray-100/90">
				{ fmt.Sprintf("%d", m.Assists) }
			</div>
		</div>
		<div class="text-xs text-gray-900/90 dark:text-gray-100/90">
			{ fmt.Sprintf("%.2f KDA", m.KilLDeathRatio) }
		</div>
	</div>
}

type CSWidget struct {
	CS          int
	CSPerMinute float32
}

templ (m CSWidget) ToTempl(ctx context.Context) {
	<div class="h-9 w-15">
		<div class="font-semibold text-sm text-gray-900/90 dark:text-gray-100/90">
			{ fmt.Sprintf("%d CS", m.CS) }
		</div>
		<div class="text-xs text-gray-900/90 dark:text-gray-100/90">
			{ fmt.Sprintf("%.1f", m.CSPerMinute) }
		</div>
	</div>
}

type RankDeltaWidget struct {
	// RankWidget is the rank after the match. A nil value means the store
	// did not record a rank after the match.
	RankChange *shared.RankTag

	// LPChange is the lp change after the match. A nil value indicates the
	// lp change is unknown.
	LPChange *int

	Win bool
}

templ (m RankDeltaWidget) ToTempl(ctx context.Context) {
	<div class="h-9">
		<div clas="flex justify-end">
			if m.RankChange != nil {
				@m.RankChange.ToTempl(ctx)
			} else {
				<div class="text-sm font-semibold text-gray-900/90 dark:text-gray-100/90">
					Unknown
				</div>
			}
		</div>
		if m.Win {
			<div class="flex justify-end">
				<div class="text-xs bg-green-500/80 text-white px-1 rounded">
					if m.LPChange != nil {
						{ fmt.Sprintf("WIN %+d", m.LPChange) }
					} else {
						{ fmt.Sprintf("WIN +??") }
					}
				</div>
			</div>
		} else {
			<div class="flex justify-end">
				<div class="text-xs bg-red-500/80 text-white px-1 rounded">
					if m.LPChange != nil {
						{ fmt.Sprintf("LOSS %+d", m.LPChange) }
					} else {
						{ fmt.Sprintf("LOSS +??") }
					}
				</div>
			</div>
		}
	</div>
}
